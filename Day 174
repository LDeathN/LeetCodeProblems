#First Problem (402)
class Solution(object):
    def removeKdigits(self, num, k):
        stack = []
    
        for digit in num:
            while k > 0 and stack and stack[-1] > digit:
                stack.pop()
                k -= 1
            stack.append(digit)
        
        stack = stack[:len(stack) - k]
        
        result = ''.join(stack).lstrip('0')
        
        return result if result else "0"



#Second Problem (406)
class Solution(object):
    def reconstructQueue(self, people):
        people.sort(key=lambda x: (-x[0], x[1]))

        queue = []

        for person in people:
            queue.insert(person[1], person)
        
        return queue



#Third Problem (413)
class Solution(object):
    def numberOfArithmeticSlices(self, nums):
        n = len(nums)
        if n < 3:
            return 0

        count = 0
        current = 0

        for i in range(2, n):
            if nums[i] - nums[i-1] == nums[i-1] - nums[i-2]:
                current += 1
                count += current
            else:
                current = 0

        return count



#Fourth Problem (416)
class Solution(object):
    def canPartition(self, nums):
        total_sum = sum(nums)

        if total_sum % 2 != 0:
            return False
        
        target = total_sum // 2
        
        dp = [False] * (target + 1)
        dp[0] = True  

        for num in nums:
            for j in range(target, num - 1, -1):
                dp[j] = dp[j] or dp[j - num]

        return dp[target]



#Fifth Problem (417)
class Solution(object):
    def pacificAtlantic(self, heights):
        if not heights or not heights[0]:
            return []

        m, n = len(heights), len(heights[0])

        pacific_reachable = [[False] * n for _ in range(m)]
        atlantic_reachable = [[False] * n for _ in range(m)]

        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]

        def dfs(r, c, reachable):
            reachable[r][c] = True
            for dr, dc in directions:
                new_r, new_c = r + dr, c + dc
                if (0 <= new_r < m and 0 <= new_c < n and
                        not reachable[new_r][new_c] and
                        heights[new_r][new_c] >= heights[r][c]):
                    dfs(new_r, new_c, reachable)

        for i in range(m):
            dfs(i, 0, pacific_reachable)  
            dfs(i, n - 1, atlantic_reachable)  
        for j in range(n):
            dfs(0, j, pacific_reachable) 
            dfs(m - 1, j, atlantic_reachable) 

        result = []
        for i in range(m):
            for j in range(n):
                if pacific_reachable[i][j] and atlantic_reachable[i][j]:
                    result.append([i, j])

        return result


End of Day 174
