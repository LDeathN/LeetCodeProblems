#First Problem 1493
class Solution(object):
    def longestSubarray(self, nums):
        left = 0
        zero_count = 0
        max_length = 0
        
        for right in range(len(nums)):
            if nums[right] == 0:
                zero_count += 1
            
            while zero_count > 1:
                if nums[left] == 0:
                    zero_count -= 1
                left += 1
            
            max_length = max(max_length, right - left)
        
        return max_length



#Second Problem 1497
class Solution(object):
    def canArrange(self, arr, k):
        freq = [0] * k
    
        for num in arr:
            rem = num % k
            if rem < 0:  
                rem += k
            freq[rem] += 1
        
        for i in range(k):
            if i == 0:  
                if freq[i] % 2 != 0:
                    return False
            elif i <= k // 2:  
                if freq[i] != freq[k - i]:
                    return False
        
        return True



#Third Problem 1498
class Solution(object):
    def numSubseq(self, nums, target):
        MOD = 10**9 + 7
    
        nums.sort()
        
        n = len(nums)
        powers = [1] * n
        for i in range(1, n):
            powers[i] = (powers[i - 1] * 2) % MOD
        
        left, right = 0, n - 1
        result = 0
        
        while left <= right:
            if nums[left] + nums[right] <= target:
                result = (result + powers[right - left]) % MOD
                left += 1
            else:
                right -= 1
        
        return result




