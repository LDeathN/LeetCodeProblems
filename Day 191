#First Problem (633)
class Solution(object):
    def judgeSquareSum(self, c):
        a, b = 0, int(math.sqrt(c))
    
        while a <= b:
            current_sum = a * a + b * b
            if current_sum == c:
                return True
            elif current_sum < c:
                a += 1
            else:
                b -= 1
                
        return False



#Second Problem (636)
class Solution(object):
    def exclusiveTime(self, n, logs):
        result = [0] * n  
        stack = [] 
        prev_time = 0  

        for log in logs:
            function_id, action, timestamp = log.split(":")
            function_id, timestamp = int(function_id), int(timestamp)
            
            if action == "start":
                if stack:
                    result[stack[-1]] += timestamp - prev_time
                stack.append(function_id)
                prev_time = timestamp
            else: 
                result[stack.pop()] += timestamp - prev_time + 1
                prev_time = timestamp + 1

        return result



#Third Problem (640)
class Solution(object):
    def solveEquation(self, equation):
        def parse_side(side):
            x_coefficient = 0
            constant = 0
            i = 0
            sign = 1  
            
            while i < len(side):
                if side[i] == '+':
                    sign = 1
                    i += 1
                elif side[i] == '-':
                    sign = -1
                    i += 1
                elif side[i].isdigit() or side[i] == 'x':
                    j = i
                    while j < len(side) and side[j].isdigit():
                        j += 1
                    if j < len(side) and side[j] == 'x': 
                        coef = int(side[i:j]) if j > i else 1 
                        x_coefficient += sign * coef
                        i = j + 1  
                    else:  
                        constant += sign * int(side[i:j])
                        i = j
                else:
                    i += 1  
            
            return x_coefficient, constant

        left_side, right_side = equation.split('=')

        left_x, left_const = parse_side(left_side)
        right_x, right_const = parse_side(right_side)

        x_coefficient = left_x - right_x
        constant = right_const - left_const

        if x_coefficient == 0:
            if constant == 0:
                return "Infinite solutions"
            else:
                return "No solution"
        else:
            solution = constant // x_coefficient
            return "x=" + str(solution)



#Fourth Problem (646)
class Solution(object):
    def findLongestChain(self, pairs):
        pairs.sort(key=lambda x: x[1])

        current_end = float('-inf')
        chain_length = 0
        
        for left, right in pairs:
            if left > current_end:
                current_end = right
                chain_length += 1
        
        return chain_length




