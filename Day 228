#First Problem 1070
WITH FirstYearSales AS (
    SELECT
        product_id,
        MIN(year) AS first_year
    FROM
        Sales
    GROUP BY
        product_id
)
SELECT
    s.product_id,
    f.first_year,
    s.quantity,
    s.price
FROM
    FirstYearSales f
JOIN
    Sales s
ON
    f.product_id = s.product_id AND f.first_year = s.year;



#Second Problem 1072
class Solution(object):
    from collections import Counter
    def maxEqualRowsAfterFlips(self, matrix):
        patterns = Counter()

        for row in matrix:
            pattern = tuple(x ^ row[0] for x in row)
            patterns[pattern] += 1

        return max(patterns.values())



#Third Problem 1079
class Solution(object):
    def numTilePossibilities(self, tiles):
        def backtrack(counter, count):
            for char in counter:
                if counter[char] > 0:
                    count += 1
                    counter[char] -= 1
                    count = backtrack(counter, count)
                    counter[char] += 1
            return count

        counter = Counter(tiles)
        return backtrack(counter, 0)



#Fourth Problem 1080
class Solution(object):
    def sufficientSubset(self, root, limit):
        def dfs(node, current_sum):
            if not node:
                return None
            
            current_sum += node.val
            
            if not node.left and not node.right:
                return None if current_sum < limit else node
            
            node.left = dfs(node.left, current_sum)
            node.right = dfs(node.right, current_sum)
            
            return node if node.left or node.right else None
        
        return dfs(root, 0)




