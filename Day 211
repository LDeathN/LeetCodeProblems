#First Problem (901)
class StockSpanner(object):

    def __init__(self):
        self.stack = []

    def next(self, price):
        span = 1  
        while self.stack and self.stack[-1][0] <= price:
            span += self.stack.pop()[1]  
        self.stack.append((price, span))
        return span



#Second Problem (904)
class Solution(object):
    def totalFruit(self, fruits):
        max_fruits = 0
        left = 0
        fruit_count = defaultdict(int)  

        for right in range(len(fruits)):
            fruit_count[fruits[right]] += 1  

            while len(fruit_count) > 2:
                fruit_count[fruits[left]] -= 1
                if fruit_count[fruits[left]] == 0:
                    del fruit_count[fruits[left]]  
                left += 1  

            max_fruits = max(max_fruits, right - left + 1)

        return max_fruits



#Third Problem (907)
class Solution(object):
    def sumSubarrayMins(self, arr):
        MOD = 10**9 + 7
        n = len(arr)
        
        ple = [-1] * n 
        nle = [n] * n  
        stack = []
        
        for i in range(n):
            while stack and arr[stack[-1]] >= arr[i]:
                stack.pop()
            if stack:
                ple[i] = stack[-1]
            stack.append(i)
        
        stack = []
        for i in range(n - 1, -1, -1):
            while stack and arr[stack[-1]] > arr[i]:
                stack.pop()
            if stack:
                nle[i] = stack[-1]
            stack.append(i)
        
        result = 0
        for i in range(n):
            left = i - ple[i]
            right = nle[i] - i
            result += arr[i] * left * right
            result %= MOD
        
        return result



#Fourth Problem (909)
class Solution(object):
    def snakesAndLadders(self, board):
        n = len(board)
    
        def index_to_coordinates(index):
            quot, rem = divmod(index - 1, n)
            row = n - 1 - quot
            col = rem if (quot % 2 == 0) else n - 1 - rem
            return row, col

        flattened = [-1] * (n * n + 1)
        for i in range(1, n * n + 1):
            r, c = index_to_coordinates(i)
            flattened[i] = board[r][c]

        queue = deque([(1, 0)])  
        visited = set()
        visited.add(1)

        while queue:
            curr, moves = queue.popleft()
            if curr == n * n:
                return moves 
            
            for dice_roll in range(1, 7):
                next_square = curr + dice_roll
                if next_square > n * n:
                    break
                if flattened[next_square] != -1:
                    next_square = flattened[next_square]
                if next_square not in visited:
                    visited.add(next_square)
                    queue.append((next_square, moves + 1))
        
        return -1



#Fifth Problem (910)
class Solution(object):
    def smallestRangeII(self, nums, k):
        nums.sort()  
        n = len(nums)
        result = nums[-1] - nums[0] 

        for i in range(n - 1):
            max_val = max(nums[i] + k, nums[-1] - k)
            min_val = min(nums[0] + k, nums[i + 1] - k)
            result = min(result, max_val - min_val) 

        return result


End of Day 210
