#First Problem (970)
class Solution(object):
    def powerfulIntegers(self, x, y, bound):
        powerful_numbers = set()
    
        i = 0
        while x**i <= bound:
            j = 0
            while x**i + y**j <= bound:
                powerful_numbers.add(x**i + y**j)
                if y == 1:  
                    break
                j += 1
            if x == 1: 
                break
            i += 1
        
        return list(powerful_numbers)



#Second Problem (971)
class Solution(object):
    def flipMatchVoyage(self, root, voyage):
        flipped = []
        index = [0]  

        def dfs(node):
            if not node:
                return True
            if node.val != voyage[index[0]]:
                return False
            
            index[0] += 1
            if node.left and node.left.val != voyage[index[0]]:
                flipped.append(node.val)
                if not dfs(node.right):
                    return False
                if not dfs(node.left):
                    return False
            else:
                if not dfs(node.left):
                    return False
                if not dfs(node.right):
                    return False
            return True

        if dfs(root):
            return flipped
        else:
            return [-1]



#Third Problem (973)
class Solution(object):
    def kClosest(self, points, k):
        points.sort(key=lambda p: p[0]**2 + p[1]**2)
        return points[:k]



#Fourth Problem (974)
class Solution(object):
    def subarraysDivByK(self, nums, k):
        remainder_count = {0: 1}  
        prefix_sum = 0
        count = 0
        
        for num in nums:
            prefix_sum += num
            remainder = prefix_sum % k
            
            if remainder < 0:
                remainder += k
            
            if remainder in remainder_count:
                count += remainder_count[remainder]
            
            remainder_count[remainder] = remainder_count.get(remainder, 0) + 1
        
        return count



#Fifth Problem (978)
class Solution(object):
    def maxTurbulenceSize(self, arr):
        n = len(arr)
        if n == 1:
            return 1
        
        max_length = 1
        increase = 1
        decrease = 1
        
        for i in range(1, n):
            if arr[i] > arr[i-1]:
                increase = decrease + 1
                decrease = 1
            elif arr[i] < arr[i-1]:
                decrease = increase + 1
                increase = 1
            else:
                increase = 1
                decrease = 1
            
            max_length = max(max_length, increase, decrease)
        
        return max_length


End of Day 218
