#First Problem (450)
class Solution(object):
    def deleteNode(self, root, key):
        if not root:
            return None

        if key < root.val:
            root.left = self.deleteNode(root.left, key)
        elif key > root.val:
            root.right = self.deleteNode(root.right, key)
        else:
            if not root.left and not root.right:
                return None

            if not root.left:
                return root.right
            if not root.right:
                return root.left

            successor = self.findMin(root.right)
            root.val = successor.val

            root.right = self.deleteNode(root.right, successor.val)

        return root

    def findMin(self, node):
        while node.left:
            node = node.left
        return node



#Second Problem (451)
class Solution(object):
    from collections import Counter
    def frequencySort(self, s):
        freq = Counter(s)

        sorted_chars = sorted(freq, key=freq.get, reverse=True)

        result = ''.join(char * freq[char] for char in sorted_chars)
        
        return result



#Third Problem (452)
class Solution(object):
    def findMinArrowShots(self, points):
        points.sort(key=lambda x: x[1])

        arrows = 1
        arrow_position = points[0][1]

        for i in range(1, len(points)):
            if points[i][0] > arrow_position:
                arrows += 1
                arrow_position = points[i][1]

        return arrows



#Fourth Problem (453)
class Solution(object):
    def minMoves(self, nums):
        total_sum = sum(nums)
        min_element = min(nums)

        moves = total_sum - min_element * len(nums)
        
        return moves



#Fifth Problem (454)
class Solution(object):
    def fourSumCount(self, nums1, nums2, nums3, nums4):
        sum_count = {}
        for a in nums1:
            for b in nums2:
                s = a + b
                sum_count[s] = sum_count.get(s, 0) + 1

        result = 0
        for c in nums3:
            for d in nums4:
                complement = -(c + d)
                if complement in sum_count:
                    result += sum_count[complement]
        
        return result


End of Day 178
