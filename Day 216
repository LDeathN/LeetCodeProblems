#First Problem (951)
class Solution(object):
    def flipEquiv(self, root1, root2):
        if not root1 and not root2:
            return True
        if not root1 or not root2:
            return False
        if root1.val != root2.val:
            return False
        
        return (self.flipEquiv(root1.left, root2.left) and self.flipEquiv(root1.right, root2.right)) or \
            (self.flipEquiv(root1.left, root2.right) and self.flipEquiv(root1.right, root2.left))



#Second Problem (954)
class Solution(object):
    def canReorderDoubled(self, arr):
        count = Counter(arr)
    
        for x in sorted(arr, key=abs):
            if count[x] == 0:
                continue
            if count[2 * x] == 0:
                return False
            count[x] -= 1
            count[2 * x] -= 1
        
        return True



#Third Problem (955)
class Solution(object):
    def minDeletionSize(self, strs):
        n = len(strs)
        m = len(strs[0])
        deletions = 0
        current = [""] * n 

        for col in range(m):
            new_current = [current[i] + strs[i][col] for i in range(n)]
            
            if all(new_current[i] <= new_current[i + 1] for i in range(n - 1)):
                current = new_current
            else:
                deletions += 1  

        return deletions




