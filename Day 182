#First Problem (494)
class Solution(object):
    def findTargetSumWays(self, nums, target):
        total_sum = sum(nums)

        if (target + total_sum) % 2 != 0 or target > total_sum or target < -total_sum:
            return 0

        subset_sum = (target + total_sum) // 2

        dp = [0] * (subset_sum + 1)
        dp[0] = 1

        for num in nums:
            for j in range(subset_sum, num - 1, -1):
                dp[j] += dp[j - num]

        return dp[subset_sum]



#Second Problem (497)
class Solution(object):
    import random
    def __init__(self, rects):
        self.rects = rects
        self.prefix_sums = []
        current_sum = 0

        for rect in rects:
            a, b, x, y = rect
            area = (x - a + 1) * (y - b + 1)
            current_sum += area
            self.prefix_sums.append(current_sum)
        

    def pick(self):
        target = random.randint(1, self.prefix_sums[-1])

        left, right = 0, len(self.prefix_sums) - 1
        while left < right:
            mid = (left + right) // 2
            if self.prefix_sums[mid] < target:
                left = mid + 1
            else:
                right = mid

        rect = self.rects[left]
        a, b, x, y = rect

        rand_x = random.randint(a, x)
        rand_y = random.randint(b, y)

        return [rand_x, rand_y]



#Third Problem (498)
class Solution(object):
    def findDiagonalOrder(self, mat):
        if not mat or not mat[0]:
            return []

        m, n = len(mat), len(mat[0])
        result = []
        row, col = 0, 0
        upward = True

        while len(result) < m * n:
            result.append(mat[row][col])

            if upward:
                if col == n - 1:
                    row += 1
                    upward = False
                elif row == 0:
                    col += 1
                    upward = False
                else:
                    row -= 1
                    col += 1
            else:
                if row == m - 1:
                    col += 1
                    upward = True
                elif col == 0:
                    row += 1
                    upward = True
                else:
                    row += 1
                    col -= 1

        return result



#Fourth Problem (503)
class Solution(object):
    def nextGreaterElements(self, nums):
        n = len(nums)
        res = [-1] * n
        stack = []

        for i in range(2 * n):
            current_index = i % n

            while stack and nums[current_index] > nums[stack[-1]]:
                index = stack.pop()
                res[index] = nums[current_index]

            if i < n:
                stack.append(current_index)

        return res



#Fifth Problem (508)
from collections import defaultdict
class Solution(object):
    def findFrequentTreeSum(self, root):
        sum_count = defaultdict(int)

        def subtree_sum(node):
            if not node:
                return 0

            left_sum = subtree_sum(node.left)
            right_sum = subtree_sum(node.right)

            total_sum = node.val + left_sum + right_sum

            sum_count[total_sum] += 1
            
            return total_sum

        subtree_sum(root)
        
        if not sum_count:
            return []
        
        max_freq = max(sum_count.values())
        
        result = [s for s in sum_count if sum_count[s] == max_freq]
        
        return result


End of Day 182
