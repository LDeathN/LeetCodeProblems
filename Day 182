#First Problem (494)
class Solution(object):
    def findTargetSumWays(self, nums, target):
        total_sum = sum(nums)

        if (target + total_sum) % 2 != 0 or target > total_sum or target < -total_sum:
            return 0

        subset_sum = (target + total_sum) // 2

        dp = [0] * (subset_sum + 1)
        dp[0] = 1

        for num in nums:
            for j in range(subset_sum, num - 1, -1):
                dp[j] += dp[j - num]

        return dp[subset_sum]



#Second Problem (497)
class Solution(object):
    import random
    def __init__(self, rects):
        self.rects = rects
        self.prefix_sums = []
        current_sum = 0

        for rect in rects:
            a, b, x, y = rect
            area = (x - a + 1) * (y - b + 1)
            current_sum += area
            self.prefix_sums.append(current_sum)
        

    def pick(self):
        target = random.randint(1, self.prefix_sums[-1])

        left, right = 0, len(self.prefix_sums) - 1
        while left < right:
            mid = (left + right) // 2
            if self.prefix_sums[mid] < target:
                left = mid + 1
            else:
                right = mid

        rect = self.rects[left]
        a, b, x, y = rect

        rand_x = random.randint(a, x)
        rand_y = random.randint(b, y)

        return [rand_x, rand_y]




