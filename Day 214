#First Problem (932)
class Solution(object):
    def beautifulArray(self, n):
        def helper(n):
            if n == 1:
                return [1]
            odd = helper((n + 1) // 2)  
            even = helper(n // 2)      
            return [2 * x - 1 for x in odd] + [2 * x for x in even]
        
        return helper(n)



#Second Problem (934)
class Solution(object):
    def shortestBridge(self, grid):
        n = len(grid)
        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
        visited = [[False] * n for _ in range(n)]
        queue = deque()
        
        def dfs(x, y):
            if x < 0 or x >= n or y < 0 or y >= n or grid[x][y] == 0 or visited[x][y]:
                return
            visited[x][y] = True
            queue.append((x, y))  
            for dx, dy in directions:
                dfs(x + dx, y + dy)
        
        found = False
        for i in range(n):
            if found:
                break
            for j in range(n):
                if grid[i][j] == 1:
                    dfs(i, j)
                    found = True
                    break
        
        flips = 0
        while queue:
            for _ in range(len(queue)):
                x, y = queue.popleft()
                for dx, dy in directions:
                    nx, ny = x + dx, y + dy
                    if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:
                        if grid[nx][ny] == 1: 
                            return flips
                        if grid[nx][ny] == 0:
                            visited[nx][ny] = True
                            queue.append((nx, ny))
            flips += 1



#Third Problem (935)
class Solution(object):
    def knightDialer(self, n):
        MOD = 10**9 + 7
        moves = {
            0: [4, 6],
            1: [6, 8],
            2: [7, 9],
            3: [4, 8],
            4: [0, 3, 9],
            5: [],        
            6: [0, 1, 7],
            7: [2, 6],
            8: [1, 3],
            9: [2, 4]
        }

        dp = [1] * 10  

        for _ in range(n - 1):
            next_dp = [0] * 10
            for digit in range(10):
                for next_digit in moves[digit]:
                    next_dp[next_digit] = (next_dp[next_digit] + dp[digit]) % MOD
            dp = next_dp

        return sum(dp) % MOD



#Fourth Problem (937)
class Solution(object):
    def reorderLogFiles(self, logs):
        def is_digit_log(log):
            return log.split()[1].isdigit()
        
        letter_logs = []
        digit_logs = []
        
        for log in logs:
            if is_digit_log(log):
                digit_logs.append(log)
            else:
                letter_logs.append(log)
        
        letter_logs.sort(key=lambda x: (x.split()[1:], x.split()[0]))
        
        return letter_logs + digit_logs



#Fifth Problem (939)
class Solution(object):
    def minAreaRect(self, points):
        point_set = set(map(tuple, points))
        min_area = float('inf')
        
        for i in range(len(points)):
            for j in range(i + 1, len(points)):
                x1, y1 = points[i]
                x2, y2 = points[j]
                
                if x1 != x2 and y1 != y2:
                    if (x1, y2) in point_set and (x2, y1) in point_set:
                        area = abs(x2 - x1) * abs(y2 - y1)
                        min_area = min(min_area, area)
        
        return min_area if min_area != float('inf') else 0


End of Day 214
