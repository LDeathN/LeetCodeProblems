#First Problem (911)
class TopVotedCandidate(object):

    def __init__(self, persons, times):
        self.times = times
        self.leaders = []
        vote_count = defaultdict(int)
        leader = -1  
        max_votes = 0

        for person in persons:
            vote_count[person] += 1
            if vote_count[person] >= max_votes:
                if person != leader:
                    leader = person
                max_votes = vote_count[person]
            self.leaders.append(leader)
        

    def q(self, t):
        idx = bisect_right(self.times, t) - 1
        return self.leaders[idx]



#Second Problem (912)
class Solution(object):
    def sortArray(self, nums):
        def merge(left, mid, right):
            left_half = nums[left:mid + 1]
            right_half = nums[mid + 1:right + 1]
            
            i = j = 0
            k = left
            
            while i < len(left_half) and j < len(right_half):
                if left_half[i] <= right_half[j]:
                    nums[k] = left_half[i]
                    i += 1
                else:
                    nums[k] = right_half[j]
                    j += 1
                k += 1
            
            while i < len(left_half):
                nums[k] = left_half[i]
                i += 1
                k += 1
            
            while j < len(right_half):
                nums[k] = right_half[j]
                j += 1
                k += 1

        def sort(left, right):
            if left < right:
                mid = (left + right) // 2
                sort(left, mid)        
                sort(mid + 1, right)  
                merge(left, mid, right)  

        sort(0, len(nums) - 1)
        return nums



#Third Problem (915)
class Solution(object):
    def partitionDisjoint(self, nums):
        n = len(nums)
        max_left = [0] * n
        min_right = [0] * n

        max_left[0] = nums[0]
        for i in range(1, n):
            max_left[i] = max(max_left[i - 1], nums[i])

        min_right[-1] = nums[-1]
        for i in range(n - 2, -1, -1):
            min_right[i] = min(min_right[i + 1], nums[i])

        for i in range(n - 1):
            if max_left[i] <= min_right[i + 1]:
                return i + 1



#Fourth Problem (916)
class Solution(object):
    def wordSubsets(self, words1, words2):
        target_frequency = [0] * 26
        for word in words2:
            freq = Counter(word)
            for char, count in freq.items():
                target_frequency[ord(char) - ord('a')] = max(target_frequency[ord(char) - ord('a')], count)

        result = []
        for word in words1:
            word_frequency = Counter(word)
            if all(word_frequency[chr(i + ord('a'))] >= target_frequency[i] for i in range(26)):
                result.append(word)

        return result



#Fifth Problem (918)
class Solution(object):
    def maxSubarraySumCircular(self, nums):
        def kadane(arr):
            max_sum = cur_max = arr[0]
            for num in arr[1:]:
                cur_max = max(num, cur_max + num)
                max_sum = max(max_sum, cur_max)
            return max_sum

        total_sum = sum(nums)
        max_kadane = kadane(nums)
        min_kadane = kadane([-num for num in nums])
        max_circular = total_sum + min_kadane  

        if max_circular == 0:
            return max_kadane
        
        return max(max_kadane, max_circular)


End of Day 212
