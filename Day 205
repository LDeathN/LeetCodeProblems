#First Problem (811)
class Solution(object):
    def subdomainVisits(self, cpdomains):
        from collections import defaultdict

        domain_counts = defaultdict(int)
        
        for cpdomain in cpdomains:
            count, domain = cpdomain.split()
            count = int(count)
            
            subdomains = domain.split('.')
            
            for i in range(len(subdomains)):
                subdomain = '.'.join(subdomains[i:])
                domain_counts[subdomain] += count
        
        result = []
        for domain, count in domain_counts.items():
            result.append(str(count) + " " + domain)
        
        return result



#Second Problem (814)
class Solution(object):
    def pruneTree(self, root):
        if not root:
            return None
        
        root.left = self.pruneTree(root.left)
        root.right = self.pruneTree(root.right)
        
        if root.val == 0 and not root.left and not root.right:
            return None
        
        return root



#Third Problem (816)
class Solution(object):
    def ambiguousCoordinates(self, s):
        def valid_part(part):
            n = len(part)
            if n == 0 or (n > 1 and part[0] == '0' and part[-1] == '0'):
            
                return []
            if n > 1 and part[0] == '0':
                
                return ["0." + part[1:]]
            if part[-1] == '0':
               
                return [part]
            
            return [part] + [part[:i] + '.' + part[i:] for i in range(1, n)]
        
        s = s[1:-1] 
        n = len(s)
        results = []
        
        for i in range(1, n):
            left = s[:i]
            right = s[i:]
            left_options = valid_part(left)
            right_options = valid_part(right)
            for l in left_options:
                for r in right_options:
                    results.append("(" + l + ", " + r + ")")
        
        return results



#Fourth Problem (817)
class Solution(object):
    def numComponents(self, head, nums):
        nums_set = set(nums)
        count = 0
        in_component = False

        while head:
            if head.val in nums_set:
                if not in_component:
                    count += 1
                    in_component = True
            else:
                in_component = False
            head = head.next

        return count



#Fifth Problem (820)
class TrieNode:
    def __init__(self):
        self.children = {}
        self.is_leaf = False


class Solution(object):
    def minimumLengthEncoding(self, words):
        words = sorted(set(words), key=lambda w: -len(w))
        
        root = TrieNode()
        total_length = 0

        for word in words:
            current = root
            is_new_branch = False 

            for char in reversed(word):
                if char not in current.children:
                    current.children[char] = TrieNode()
                    is_new_branch = True
                current = current.children[char]

            if is_new_branch:
                total_length += len(word) + 1

        return total_length


End of Day 205
