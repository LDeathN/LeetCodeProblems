#First Problem 1361
class Solution(object):
    def validateBinaryTreeNodes(self, n, leftChild, rightChild):
        in_degree = [0] * n

        for i in range(n):
            if leftChild[i] != -1:
                in_degree[leftChild[i]] += 1
            if rightChild[i] != -1:
                in_degree[rightChild[i]] += 1

        root = -1
        for i in range(n):
            if in_degree[i] == 0:
                if root == -1:
                    root = i
                else:
                    return False

        if root == -1:
            return False

        visited = [False] * n
        queue = [root]

        while queue:
            node = queue.pop(0)
            if visited[node]:
                return False

            visited[node] = True

            if leftChild[node] != -1:
                queue.append(leftChild[node])
            if rightChild[node] != -1:
                queue.append(rightChild[node])

        return all(visited)



#Second Problem 1362
class Solution(object):
    def closestDivisors(self, num):
        def findClosestDivisors(target):
            import math
            for i in range(int(math.sqrt(target)), 0, -1):
                if target % i == 0:
                    return (i, target // i)

        candidates1 = findClosestDivisors(num + 1)
        candidates2 = findClosestDivisors(num + 2)

        if abs(candidates1[0] - candidates1[1]) < abs(candidates2[0] - candidates2[1]):
            return list(candidates1)
        else:
            return list(candidates2)



#Third Problem 1366
class Solution(object):
    def rankTeams(self, votes):
        from collections import defaultdict

        rank = {team: [0] * len(votes[0]) + [team] for team in votes[0]}

        for vote in votes:
            for i, team in enumerate(vote):
                rank[team][i] -= 1

        sorted_teams = sorted(rank.keys(), key=lambda x: rank[x])
        return "".join(sorted_teams)



#Fourth Problem 1367
class Solution(object):
    def isSubPath(self, head, root):
        def dfs(node, head):
            if not head:
                return True
            if not node:
                return False
            if node.val != head.val:
                return False
            return dfs(node.left, head.next) or dfs(node.right, head.next)

        def traverse(node):
            if not node:
                return False
            return dfs(node, head) or traverse(node.left) or traverse(node.right)

        return traverse(root)



#Fifth Problem 1371
class Solution(object):
    def findTheLongestSubstring(self, s):
        vowel_to_bit = {'a': 1, 'e': 2, 'i': 4, 'o': 8, 'u': 16}
        state = 0
        first_occurrence = {0: -1}
        max_length = 0

        for i, char in enumerate(s):
            if char in vowel_to_bit:
                state ^= vowel_to_bit[char]
            if state in first_occurrence:
                max_length = max(max_length, i - first_occurrence[state])
            else:
                first_occurrence[state] = i

        return max_length


End of Day 247
