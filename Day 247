#First Problem 1361
class Solution(object):
    def validateBinaryTreeNodes(self, n, leftChild, rightChild):
        in_degree = [0] * n

        for i in range(n):
            if leftChild[i] != -1:
                in_degree[leftChild[i]] += 1
            if rightChild[i] != -1:
                in_degree[rightChild[i]] += 1

        root = -1
        for i in range(n):
            if in_degree[i] == 0:
                if root == -1:
                    root = i
                else:
                    return False

        if root == -1:
            return False

        visited = [False] * n
        queue = [root]

        while queue:
            node = queue.pop(0)
            if visited[node]:
                return False

            visited[node] = True

            if leftChild[node] != -1:
                queue.append(leftChild[node])
            if rightChild[node] != -1:
                queue.append(rightChild[node])

        return all(visited)



#Second Problem 1362
class Solution(object):
    def closestDivisors(self, num):
        def findClosestDivisors(target):
            import math
            for i in range(int(math.sqrt(target)), 0, -1):
                if target % i == 0:
                    return (i, target // i)

        candidates1 = findClosestDivisors(num + 1)
        candidates2 = findClosestDivisors(num + 2)

        if abs(candidates1[0] - candidates1[1]) < abs(candidates2[0] - candidates2[1]):
            return list(candidates1)
        else:
            return list(candidates2)




