#First Problem (852)
class Solution(object):
    def peakIndexInMountainArray(self, arr):
        left, right = 0, len(arr) - 1
    
        while left < right:
            mid = (left + right) // 2
            if arr[mid] < arr[mid + 1]:
                left = mid + 1
            else:
                right = mid
        
        return left



#Second Problem (865)
class Solution(object):
    def subtreeWithAllDeepest(self, root):
        def dfs(node):
            if not node:
                return (None, 0)  
            
            left_subtree, left_depth = dfs(node.left)
            right_subtree, right_depth = dfs(node.right)
            
            if left_depth > right_depth:
                return (left_subtree, left_depth + 1)
            elif right_depth > left_depth:
                return (right_subtree, right_depth + 1)
            else:
                return (node, left_depth + 1)
        
        return dfs(root)[0]




