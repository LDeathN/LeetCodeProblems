#First Problem (919)
class CBTInserter(object):

    def __init__(self, root):
        self.root = root
        self.deque = deque()
        
        queue = deque([root])
        while queue:
            node = queue.popleft()
            if not node.left or not node.right:
                self.deque.append(node)
            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)
        

    def insert(self, val):
        new_node = TreeNode(v)
        parent = self.deque[0] 
        
        if not parent.left:
            parent.left = new_node
        else:
            parent.right = new_node
            self.deque.popleft()  
        
        self.deque.append(new_node)
        
        return parent.val
        

    def get_root(self):
        return self.root



#Second Problem (921)
class Solution(object):
    def minAddToMakeValid(self, s):
        open_count = 0 
        close_count = 0 
        
        for char in s:
            if char == '(':
                open_count += 1 
            elif char == ')':
                if open_count > 0:
                    open_count -= 1  
                else:
                    close_count += 1 
        
        return open_count + close_count



#Third Problem (926)
class Solution(object):
    def minFlipsMonoIncr(self, s):
        n = len(s)
    
        total_ones = 0
        prefix_ones = 0
        flips = float('inf')
        
        total_ones = sum(1 for char in s if char == '1')
        
        for i, char in enumerate(s):
            flips = min(flips, prefix_ones + (n - i - (total_ones - prefix_ones)))
            
            if char == '1':
                prefix_ones += 1
        
        flips = min(flips, prefix_ones)
        
        return flips



#Fourth Problem (930)
class Solution(object):
    def numSubarraysWithSum(self, nums, goal):
        prefix_sum = 0
        count = 0
        prefix_counts = defaultdict(int)
        prefix_counts[0] = 1  
        
        for num in nums:
            prefix_sum += num
            if prefix_sum - goal in prefix_counts:
                count += prefix_counts[prefix_sum - goal]
            prefix_counts[prefix_sum] += 1
        
        return count




