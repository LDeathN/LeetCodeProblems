#First Problem (433)
class Solution(object):
    from collections import deque

    def minMutation(self, startGene, endGene, bank):
        if endGene not in bank:
            return -1

        bank_set = set(bank)
        visited = set()
        queue = deque([(startGene, 0)]) 
        visited.add(startGene)

        gene_chars = ['A', 'C', 'G', 'T']

        while queue:
            current_gene, current_step = queue.popleft()

            for i in range(len(current_gene)):
                for char in gene_chars:
                    if char == current_gene[i]:
                        continue

                    mutated_gene = current_gene[:i] + char + current_gene[i+1:]

                    if mutated_gene == endGene:
                        return current_step + 1

                    if mutated_gene in bank_set and mutated_gene not in visited:
                        visited.add(mutated_gene)
                        queue.append((mutated_gene, current_step + 1))

        return -1



#Second Problem (435)
class Solution(object):
    def eraseOverlapIntervals(self, intervals):
        intervals.sort(key=lambda x: x[1])

        end_time = float('-inf')
        non_overlapping_count = 0

        for interval in intervals:
            if interval[0] >= end_time:
                end_time = interval[1]
                non_overlapping_count += 1
        
        return len(intervals) - non_overlapping_count



#Third Problem (436)
class Solution(object):
    import bisect
    def findRightInterval(self, intervals):
        sorted_intervals = sorted((start, i) for i, (start, end) in enumerate(intervals))
    
        result = []
        for start, end in intervals:
            idx = bisect.bisect_left(sorted_intervals, (end,))
            if idx < len(sorted_intervals):
                result.append(sorted_intervals[idx][1])  
            else:
                result.append(-1)  
        
        return result



#Fourth Problem (437)
class Solution(object):
    def pathSum(self, root, targetSum):
        prefix_sums = {0: 1}

        def dfs(node, current_sum):
            if not node:
                return 0
            
            current_sum += node.val
            num_paths = prefix_sums.get(current_sum - targetSum, 0)

            prefix_sums[current_sum] = prefix_sums.get(current_sum, 0) + 1
            
            num_paths += dfs(node.left, current_sum)
            num_paths += dfs(node.right, current_sum)
            
            prefix_sums[current_sum] -= 1
            
            return num_paths
        
        return dfs(root, 0)



#Fifth Problem (438)
class Solution(object):
    def findAnagrams(self, s, p):
        result = []
        len_s, len_p = len(s), len(p)

        if len_p > len_s:
            return result

        p_count = [0] * 26
        s_count = [0] * 26

        for i in range(len_p):
            p_count[ord(p[i]) - ord('a')] += 1
            s_count[ord(s[i]) - ord('a')] += 1
        
        for i in range(len_s - len_p + 1):
            if p_count == s_count:
                result.append(i)

            if i + len_p < len_s:
                s_count[ord(s[i]) - ord('a')] -= 1
                s_count[ord(s[i + len_p]) - ord('a')] += 1
        
        return result


End of Day 176
