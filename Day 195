#First Problem (677)
class TrieNode:
    def __init__(self):
        self.children = {}
        self.value = 0

class MapSum(object):

    def __init__(self):
        self.root = TrieNode()
        self.map = {}

    def insert(self, key, val):
        delta = val - self.map.get(key, 0)
        self.map[key] = val

        node = self.root
        for char in key:
            if char not in node.children:
                node.children[char] = TrieNode()
            node = node.children[char]
            node.value += delta
        

    def sum(self, prefix):
        node = self.root
        for char in prefix:
            if char not in node.children:
                return 0
            node = node.children[char]
        return node.value



#Second Problem (678)
class Solution(object):
    def checkValidString(self, s):
        low = high = 0
    
        for char in s:
            if char == '(':
                low += 1
                high += 1
            elif char == ')':
                low = max(low - 1, 0)
                high -= 1
            else: 
                low = max(low - 1, 0)
                high += 1

            if high < 0:
                return False

        return low == 0



#Third Problem (684)
class Solution(object):
    class UnionFind:
        def __init__(self, n):
            self.parent = list(range(n))
            self.rank = [1] * n

        def find(self, x):
            if x != self.parent[x]:
                self.parent[x] = self.find(self.parent[x])
            return self.parent[x]

        def union(self, x, y):
            rootX = self.find(x)
            rootY = self.find(y)

            if rootX == rootY:
                return False  

            if self.rank[rootX] > self.rank[rootY]:
                self.parent[rootY] = rootX
            elif self.rank[rootX] < self.rank[rootY]:
                self.parent[rootX] = rootY
            else:
                self.parent[rootY] = rootX
                self.rank[rootX] += 1

            return True

    
    def findRedundantConnection(self, edges):
        n = len(edges)
        uf = self.UnionFind(n + 1) 

        for u, v in edges:
            if not uf.union(u, v):  
                return [u, v]




