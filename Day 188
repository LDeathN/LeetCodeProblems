#First Problem (570)
SELECT e.name
FROM Employee e
JOIN (
    SELECT managerId
    FROM Employee
    WHERE managerId IS NOT NULL
    GROUP BY managerId
    HAVING COUNT(*) >= 5
) m ON e.id = m.managerId;



#Second Problem (581)
class Solution(object):
    def findUnsortedSubarray(self, nums):
        n = len(nums)
        if n <= 1:
            return 0

        start = 0
        while start < n - 1 and nums[start] <= nums[start + 1]:
            start += 1

        if start == n - 1:
            return 0

        end = n - 1
        while end > 0 and nums[end] >= nums[end - 1]:
            end -= 1

        subarray_min = min(nums[start:end + 1])
        subarray_max = max(nums[start:end + 1])

        while start > 0 and nums[start - 1] > subarray_min:
            start -= 1

        while end < n - 1 and nums[end + 1] < subarray_max:
            end += 1

        return end - start + 1



#Third Problem (583)
class Solution(object):
    def minDistance(self, word1, word2):
        len1 = len(word1)
        len2 = len(word2)
        
        dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]

        for i in range(1, len1 + 1):
            for j in range(1, len2 + 1):
                if word1[i - 1] == word2[j - 1]:
                    dp[i][j] = dp[i - 1][j - 1] + 1
                else:
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])

        lcs_length = dp[len1][len2]

        deletions = (len1 - lcs_length) + (len2 - lcs_length)
        
        return deletions



#Fourth Problem (585)
SELECT 
    ROUND(SUM(tiv_2016), 2) AS tiv_2016
FROM 
    Insurance
WHERE 
    tiv_2015 IN (SELECT tiv_2015 
                 FROM Insurance 
                 GROUP BY tiv_2015 
                 HAVING COUNT(*) > 1)
    AND (lat, lon) IN (SELECT lat, lon 
                       FROM Insurance 
                       GROUP BY lat, lon 
                       HAVING COUNT(*) = 1);




