#First Problem (396)
class Solution(object):
    def maxRotateFunction(self, nums):
        n = len(nums)
        sum_nums = sum(nums)

        F = sum(i * num for i, num in enumerate(nums))
        
        max_value = F  

        for k in range(1, n):
            F = F + sum_nums - n * nums[n - k]
            max_value = max(max_value, F)
        
        return max_value



#Second Problem (397)
class Solution(object):
    def integerReplacement(self, n):
        operations = 0
        while n > 1:
            if n % 2 == 0:
                n //= 2
            elif n == 3 or (n - 1) % 4 == 0:
                n -= 1
            else:
                n += 1
            operations += 1
        return operations



#Third Problem (398)
class Solution(object):
    import random
    def __init__(self, nums):
        self.nums = nums
        

    def pick(self, target):
        indices = [i for i, num in enumerate(self.nums) if num == target]
        return random.choice(indices)



#Fourth Problem (399)
class Solution(object):
    from collections import defaultdict
    def calcEquation(self, equations, values, queries):
        graph = defaultdict(dict)
        
        for (a, b), value in zip(equations, values):
            graph[a][b] = value
            graph[b][a] = 1 / value

        def dfs(x, y, visited):
            if x not in graph or y not in graph:
                return -1.0
            if y in graph[x]:
                return graph[x][y]
            
            visited.add(x)
            for neighbor, weight in graph[x].items():
                if neighbor not in visited:
                    result = dfs(neighbor, y, visited)
                    if result != -1.0:
                        return result * weight
            visited.remove(x)
            return -1.0

        results = []
        for c, d in queries:
            if c == d and c in graph:
                results.append(1.0)
            else:
                results.append(dfs(c, d, set()))
        
        return results




