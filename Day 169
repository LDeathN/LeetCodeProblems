#First Problem (346)
class Solution(object):
    def integerBreak(self, n):
        if n == 2:
            return 1
        if n == 3:
            return 2
        
        if n % 3 == 0:
            return 3 ** (n // 3)
        elif n % 3 == 1:
            return 3 ** (n // 3 - 1) * 4
        else:
            return 3 ** (n // 3) * 2



#Second Problem (347)
class Solution(object):
    import heapq
    from collections import Counter 

    def topKFrequent(self, nums, k):
        count = Counter(nums)  
        heap = []
        for num, freq in count.items():
            heapq.heappush(heap, (-freq, num))

        result = []
        for _ in range(k):
            result.append(heapq.heappop(heap)[1])
        
        return result



#Third Problem (357)
class Solution(object):
    def countNumbersWithUniqueDigits(self, n):
        if n == 0:
            return 1
        count = 10  
        unique_digits = 9 
        available_digits = 9  
        
        for i in range(2, n + 1):
            unique_digits *= available_digits
            count += unique_digits
            available_digits -= 1
            
        return count




