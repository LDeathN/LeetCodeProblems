#First Problem (346)
class Solution(object):
    def integerBreak(self, n):
        if n == 2:
            return 1
        if n == 3:
            return 2
        
        if n % 3 == 0:
            return 3 ** (n // 3)
        elif n % 3 == 1:
            return 3 ** (n // 3 - 1) * 4
        else:
            return 3 ** (n // 3) * 2



#Second Problem (347)
class Solution(object):
    import heapq
    from collections import Counter 

    def topKFrequent(self, nums, k):
        count = Counter(nums)  
        heap = []
        for num, freq in count.items():
            heapq.heappush(heap, (-freq, num))

        result = []
        for _ in range(k):
            result.append(heapq.heappop(heap)[1])
        
        return result



#Third Problem (357)
class Solution(object):
    def countNumbersWithUniqueDigits(self, n):
        if n == 0:
            return 1
        count = 10  
        unique_digits = 9 
        available_digits = 9  
        
        for i in range(2, n + 1):
            unique_digits *= available_digits
            count += unique_digits
            available_digits -= 1
            
        return count



#Fourth Problem (368)
class Solution(object):
    def largestDivisibleSubset(self, nums):
        if not nums:
            return []

        nums.sort()

        n = len(nums)
        dp = [1] * n  
        prev = [-1] * n  
        max_size = 1  
        max_index = 0  

        for i in range(1, n):
            for j in range(i):
                if nums[i] % nums[j] == 0:  
                    if dp[j] + 1 > dp[i]:
                        dp[i] = dp[j] + 1
                        prev[i] = j

            if dp[i] > max_size:
                max_size = dp[i]
                max_index = i

        result = []
        while max_index != -1:
            result.append(nums[max_index])
            max_index = prev[max_index]

        return result[::-1]



#Fifth Problem (371)
class Solution(object):
    def getSum(self, a, b):
        mask = 0xFFFFFFFF

        while b != 0:
            sum_no_carry = (a ^ b) & mask

            carry = ((a & b) << 1) & mask

            a = sum_no_carry

            b = carry

        return a if a <= 0x7FFFFFFF else ~(a ^ mask)


End of Day 169
