#First Problem (979)
class Solution(object):
    def distributeCoins(self, root):
        self.moves = 0
        
        def dfs(node):
            if not node:
                return 0
            
            left_balance = dfs(node.left)
            right_balance = dfs(node.right)
            
            balance = node.val + left_balance + right_balance - 1
            
            self.moves += abs(balance)
            
            return balance
        
        dfs(root)
        return self.moves



#Second Problem (981)
class TimeMap(object):

    def __init__(self):
        self.store = defaultdict(list)

    def set(self, key, value, timestamp):
        self.store[key].append((timestamp, value))
        

    def get(self, key, timestamp):
        if key not in self.store:
            return ""
        
        values = self.store[key]
        
        i = bisect.bisect_right(values, (timestamp, chr(127)))
        
        if i == 0:
            return ""
        
        return values[i - 1][1]



#Third Problem (983)
class Solution(object):
    def mincostTickets(self, days, costs):
        travel_days = set(days)
        max_day = max(days)
        dp = [0] * (max_day + 1)
        
        for day in range(1, max_day + 1):
            if day not in travel_days:
                dp[day] = dp[day - 1]
            else:
                dp[day] = min(
                    dp[day - 1] + costs[0],  
                    dp[max(0, day - 7)] + costs[1], 
                    dp[max(0, day - 30)] + costs[2]  
                )
        
        return dp[max_day]



#Fourth Problem (984)
class Solution(object):
    def strWithout3a3b(self, a, b):
        result = []
    
        while a > 0 or b > 0:
            if a > b:
                if a >= 2:
                    result.append('aa')
                    a -= 2
                else:
                    result.append('a')
                    a -= 1
                if b > 0:
                    result.append('b')
                    b -= 1
            elif b > a:
                if b >= 2:
                    result.append('bb')
                    b -= 2
                else:
                    result.append('b')
                    b -= 1
                if a > 0:
                    result.append('a')
                    a -= 1
            else:  # a == b
                result.append('a')
                a -= 1
                result.append('b')
                b -= 1
        
        return ''.join(result)




