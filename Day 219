#First Problem (979)
class Solution(object):
    def distributeCoins(self, root):
        self.moves = 0
        
        def dfs(node):
            if not node:
                return 0
            
            left_balance = dfs(node.left)
            right_balance = dfs(node.right)
            
            balance = node.val + left_balance + right_balance - 1
            
            self.moves += abs(balance)
            
            return balance
        
        dfs(root)
        return self.moves



#Second Problem (981)
class TimeMap(object):

    def __init__(self):
        self.store = defaultdict(list)

    def set(self, key, value, timestamp):
        self.store[key].append((timestamp, value))
        

    def get(self, key, timestamp):
        if key not in self.store:
            return ""
        
        values = self.store[key]
        
        i = bisect.bisect_right(values, (timestamp, chr(127)))
        
        if i == 0:
            return ""
        
        return values[i - 1][1]




