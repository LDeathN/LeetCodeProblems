#First Problem (822)
class Solution(object):
    def flipgame(self, fronts, backs):
        bad_numbers = {fronts[i] for i in range(len(fronts)) if fronts[i] == backs[i]}

        candidates = {x for x in fronts + backs if x not in bad_numbers}

        return min(candidates) if candidates else 0



#Second Problem (823)
class Solution(object):
    def numFactoredBinaryTrees(self, arr):
        MOD = 10**9 + 7
        
        arr.sort()
        
        dp = {}
        
        for x in arr:
            dp[x] = 1  
        
        for i in range(len(arr)):
            for j in range(i):
                if arr[i] % arr[j] == 0:
                    right = arr[i] // arr[j]
                    if right in dp:
                        dp[arr[i]] += dp[arr[j]] * dp[right]
                        dp[arr[i]] %= MOD
        
        return sum(dp.values()) % MOD



#Third Problem (826)
class Solution(object):
    def maxProfitAssignment(self, difficulty, profit, worker):
        jobs = sorted(zip(difficulty, profit))
        worker.sort()
        
        max_profit = 0
        total_profit = 0
        i = 0
        
        for ability in worker:
            while i < len(jobs) and jobs[i][0] <= ability:
                max_profit = max(max_profit, jobs[i][1])
                i += 1
            total_profit += max_profit
        
        return total_profit




