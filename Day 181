#First Problem (477)
class Solution(object):
    def totalHammingDistance(self, nums):
        total_distance = 0
        n = len(nums)

        for bit in range(32):
            count_ones = 0

            for num in nums:
                if (num >> bit) & 1:
                    count_ones += 1

            count_zeros = n - count_ones

            total_distance += count_ones * count_zeros
        
        return total_distance



#Second Problem (478)
class Solution(object):
    import random
    import math

    def __init__(self, radius, x_center, y_center):
        self.radius = radius
        self.x_center = x_center
        self.y_center = y_center
        

    def randPoint(self):
        theta = random.uniform(0, 2 * math.pi)
        r = math.sqrt(random.uniform(0, 1)) * self.radius
        x = self.x_center + r * math.cos(theta)
        y = self.y_center + r * math.sin(theta)
        return [x, y]



#Third Problem (481)
class Solution(object):
    def magicalString(self, n):
        if n <= 0:
            return 0
        if n <= 3:
            return 1 

        s = ['1', '2', '2']
        idx = 2  
        num_ones = 1 

        while len(s) < n:
            next_num = '1' if s[-1] == '2' else '2'
            count = int(s[idx])
            for _ in range(count):
                s.append(next_num)
                if next_num == '1' and len(s) <= n:
                    num_ones += 1
            idx += 1

        return num_ones



#Fourth Problem (486)
class Solution(object):
    def predictTheWinner(self, nums):
        n = len(nums)
        dp = [[0] * n for _ in range(n)]

        for i in range(n):
            dp[i][i] = nums[i]

        for length in range(2, n + 1): 
            for i in range(n - length + 1):
                j = i + length - 1
                dp[i][j] = max(nums[i] - dp[i + 1][j], nums[j] - dp[i][j - 1])

        return dp[0][n - 1] >= 0



#Fifth Problem (491)
class Solution(object):
    def findSubsequences(self, nums):
        res = set()

        def dfs(index, path):
            if len(path) >= 2:
                res.add(tuple(path))

            for i in range(index, len(nums)):

                if not path or nums[i] >= path[-1]:
                    dfs(i + 1, path + [nums[i]])

        dfs(0, [])

        return [list(seq) for seq in res]


End of Day 181
