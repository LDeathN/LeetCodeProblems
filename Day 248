#First Problem 1372
class Solution(object):
    def longestZigZag(self, root):
        def dfs(node, is_left, length, max_length):
            if not node:
                return
            max_length[0] = max(max_length[0], length)
            if is_left:
                dfs(node.left, False, length + 1, max_length)
                dfs(node.right, True, 1, max_length)
            else:
                dfs(node.right, True, length + 1, max_length)
                dfs(node.left, False, 1, max_length)
        
        max_length = [0]  
        dfs(root, True, 0, max_length)  
        dfs(root, False, 0, max_length)  
        return max_length[0]



#Second Problem 1375
class Solution(object):
    def numTimesAllBlue(self, flips):
        max_flipped = 0
        count = 0

        for i, flip in enumerate(flips, 1):
            max_flipped = max(max_flipped, flip)
            if max_flipped == i:
                count += 1

        return count



#Third Problem 1376
class Solution(object):
    def numOfMinutes(self, n, headID, manager, informTime):
        subordinates = defaultdict(list)
        for employee, mgr in enumerate(manager):
            if mgr != -1:
                subordinates[mgr].append(employee)
        
        def dfs(emp_id):
            if not subordinates[emp_id]:  
                return 0
            max_time = 0
            for sub in subordinates[emp_id]:
                max_time = max(max_time, dfs(sub))
            return informTime[emp_id] + max_time

        return dfs(headID)



#Fourth Problem 1382
class Solution(object):
    def balanceBST(self, root):
        def in_order_traversal(node):
            if not node:
                return []
            return in_order_traversal(node.left) + [node.val] + in_order_traversal(node.right)

        def build_balanced_tree(nums):
            if not nums:
                return None
            mid = len(nums) // 2
            root = TreeNode(nums[mid])
            root.left = build_balanced_tree(nums[:mid])
            root.right = build_balanced_tree(nums[mid + 1:])
            return root

        sorted_values = in_order_traversal(root)

        return build_balanced_tree(sorted_values)




