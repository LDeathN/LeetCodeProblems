#First Problem 1090
class Solution(object):
    def largestValsFromLabels(self, values, labels, numWanted, useLimit):
        items = sorted(zip(values, labels), key=lambda x: -x[0])
    
        total_sum = 0
        label_count = {}
        num_selected = 0

        for value, label in items:
            if num_selected >= numWanted:
                break  
            
            if label_count.get(label, 0) < useLimit:
                total_sum += value
                num_selected += 1
                label_count[label] = label_count.get(label, 0) + 1

        return total_sum



#Second Problem 1091
class Solution(object):
    def shortestPathBinaryMatrix(self, grid):
        n = len(grid)
    
        if grid[0][0] == 1 or grid[n-1][n-1] == 1:
            return -1
        
        directions = [(-1, -1), (-1, 0), (-1, 1), 
                    (0, -1),          (0, 1), 
                    (1, -1), (1, 0), (1, 1)]
        
        queue = deque([(0, 0, 1)])  
        visited = set((0, 0))
        
        while queue:
            row, col, dist = queue.popleft()
            
            if row == n-1 and col == n-1:
                return dist
            
            for dr, dc in directions:
                r, c = row + dr, col + dc
                if 0 <= r < n and 0 <= c < n and grid[r][c] == 0 and (r, c) not in visited:
                    visited.add((r, c))
                    queue.append((r, c, dist + 1))
        
        return -1



#Third Problem 1094
class Solution(object):
    def carPooling(self, trips, capacity):
        changes = [0] * 1001  

        for numPassengers, start, end in trips:
            changes[start] += numPassengers  
            changes[end] -= numPassengers  

        current_passengers = 0
        for change in changes:
            current_passengers += change
            if current_passengers > capacity:
                return False  

        return True



#Fourth Problem 1105
class Solution(object):
    def minHeightShelves(self, books, shelfWidth):
        n = len(books)
        dp = [float('inf')] * (n + 1)
        dp[0] = 0  

        for i in range(1, n + 1):
            width = 0
            height = 0
            for j in range(i, 0, -1): 
                width += books[j - 1][0]
                if width > shelfWidth:
                    break
                height = max(height, books[j - 1][1])
                dp[i] = min(dp[i], dp[j - 1] + height)

        return dp[n]



#Fifth Problem 1109
class Solution(object):
    def corpFlightBookings(self, bookings, n):
        diff = [0] * (n + 1)  

        for first, last, seats in bookings:
            diff[first - 1] += seats  
            if last < n:
                diff[last] -= seats  

        result = [0] * n
        current_seats = 0
        for i in range(n):
            current_seats += diff[i]
            result[i] = current_seats

        return result


End of Day 229
