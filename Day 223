#First Problem (1017)
class Solution(object):
    def baseNeg2(self, n):
        if n == 0:
            return "0"
        
        result = []
        while n != 0:
            remainder = n % -2
            n //= -2
            if remainder < 0:
                remainder += 2
                n += 1
            result.append(str(remainder))
        
        return ''.join(result[::-1])



#Second Problem (1019)
class Solution(object):
    def nextLargerNodes(self, head):
        values = []
        while head:
            values.append(head.val)
            head = head.next
        
        result = [0] * len(values)
        stack = [] 
        
        for i in range(len(values)):
            while stack and values[i] > values[stack[-1]]:
                index = stack.pop()
                result[index] = values[i]
            stack.append(i)
        
        return result



#Third Problem (1020)
class Solution(object):
    def numEnclaves(self, grid):
        rows, cols = len(grid), len(grid[0])
    
        def dfs(r, c):
            if r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] != 1:
                return
            grid[r][c] = -1 
            dfs(r + 1, c)
            dfs(r - 1, c)
            dfs(r, c + 1)
            dfs(r, c - 1)
        
        for i in range(rows):
            if grid[i][0] == 1: dfs(i, 0)
            if grid[i][cols - 1] == 1: dfs(i, cols - 1)
        
        for j in range(cols):
            if grid[0][j] == 1: dfs(0, j)
            if grid[rows - 1][j] == 1: dfs(rows - 1, j)
        
        return sum(grid[r][c] == 1 for r in range(rows) for c in range(cols))



#Fourth Problem (1023)
class Solution(object):
    def camelMatch(self, queries, pattern):
        def matches(query, pattern):
            i = 0  
            for char in query:
                if i < len(pattern) and char == pattern[i]:
                    i += 1
                elif char.isupper() and (i >= len(pattern) or char != pattern[i]):
                    return False
            return i == len(pattern)
        
        return [matches(query, pattern) for query in queries]




