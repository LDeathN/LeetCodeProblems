#First Problem (1008)
#         self.right = right
class Solution(object):
    def bstFromPreorder(self, preorder):
        if not preorder:
            return None
        
        root = TreeNode(preorder[0])
        
        def insert(node, val):
            if not node:
                return TreeNode(val)
            if val < node.val:
                node.left = insert(node.left, val)
            else:
                node.right = insert(node.right, val)
            return node
        
        for value in preorder[1:]:
            insert(root, value)
        
        return root



#Second Problem (1010)
class Solution(object):
    def numPairsDivisibleBy60(self, time):
        from collections import defaultdict
    
        remainder_count = defaultdict(int)
        count = 0
        
        for t in time:
            remainder = t % 60
            complement = (60 - remainder) % 60
            count += remainder_count[complement]
            remainder_count[remainder] += 1
        
        return count




