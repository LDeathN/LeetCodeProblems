#First Problem (1008)
#         self.right = right
class Solution(object):
    def bstFromPreorder(self, preorder):
        if not preorder:
            return None
        
        root = TreeNode(preorder[0])
        
        def insert(node, val):
            if not node:
                return TreeNode(val)
            if val < node.val:
                node.left = insert(node.left, val)
            else:
                node.right = insert(node.right, val)
            return node
        
        for value in preorder[1:]:
            insert(root, value)
        
        return root



#Second Problem (1010)
class Solution(object):
    def numPairsDivisibleBy60(self, time):
        from collections import defaultdict
    
        remainder_count = defaultdict(int)
        count = 0
        
        for t in time:
            remainder = t % 60
            complement = (60 - remainder) % 60
            count += remainder_count[complement]
            remainder_count[remainder] += 1
        
        return count



#Third Problem (1011)
class Solution(object):
    def shipWithinDays(self, weights, days):
        def canShip(capacity):
            total = 0
            required_days = 1
            for weight in weights:
                if total + weight > capacity:
                    required_days += 1
                    total = 0
                total += weight
                if required_days > days:
                    return False
            return True
        
        left, right = max(weights), sum(weights)
        while left < right:
            mid = (left + right) // 2
            if canShip(mid):
                right = mid
            else:
                left = mid + 1
        return left



#Fourth Problem (1014)
class Solution(object):
    def maxScoreSightseeingPair(self, values):
        max_score = 0
        max_i = values[0] + 0  
        
        for j in range(1, len(values)):
            max_score = max(max_score, max_i + values[j] - j)
            
            max_i = max(max_i, values[j] + j)
        
        return max_score




