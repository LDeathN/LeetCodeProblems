#First Problem 1347
class Solution(object):
    def minSteps(self, s, t):
        count_s = Counter(s)
        count_t = Counter(t)
        
        replacements = 0
        for char, freq in count_s.items():
            if freq > count_t[char]:
                replacements += freq - count_t[char]
        
        return replacements



#Second Problem 1348
class TweetCounts(object):

    def __init__(self):
        self.tweets = defaultdict(list)

    def recordTweet(self, tweetName, time):
        self.tweets[tweetName].append(time)
        

    def getTweetCountsPerFrequency(self, freq, tweetName, startTime, endTime):
        freq_to_seconds = {
            "minute": 60,
            "hour": 3600,
            "day": 86400
        }
        chunk_size = freq_to_seconds[freq]
        
        if tweetName not in self.tweets:
            return []
        times = self.tweets[tweetName]
        
        times.sort()
        
        result = []
        
        current_start = startTime
        while current_start <= endTime:
            current_end = min(current_start + chunk_size - 1, endTime)
            start_idx = bisect_left(times, current_start)
            end_idx = bisect_right(times, current_end)
            result.append(end_idx - start_idx)
            current_start += chunk_size
        
        return result




