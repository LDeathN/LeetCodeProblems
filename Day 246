#First Problem 1347
class Solution(object):
    def minSteps(self, s, t):
        count_s = Counter(s)
        count_t = Counter(t)
        
        replacements = 0
        for char, freq in count_s.items():
            if freq > count_t[char]:
                replacements += freq - count_t[char]
        
        return replacements



#Second Problem 1348
class TweetCounts(object):

    def __init__(self):
        self.tweets = defaultdict(list)

    def recordTweet(self, tweetName, time):
        self.tweets[tweetName].append(time)
        

    def getTweetCountsPerFrequency(self, freq, tweetName, startTime, endTime):
        freq_to_seconds = {
            "minute": 60,
            "hour": 3600,
            "day": 86400
        }
        chunk_size = freq_to_seconds[freq]
        
        if tweetName not in self.tweets:
            return []
        times = self.tweets[tweetName]
        
        times.sort()
        
        result = []
        
        current_start = startTime
        while current_start <= endTime:
            current_end = min(current_start + chunk_size - 1, endTime)
            start_idx = bisect_left(times, current_start)
            end_idx = bisect_right(times, current_end)
            result.append(end_idx - start_idx)
            current_start += chunk_size
        
        return result



#Third Problem 1352
class ProductOfNumbers(object):

    def __init__(self):
        self.prefix = [1] 
        self.zero_index = -1

    def add(self, num):
        if num == 0:
            self.prefix = [1]
        else:
            self.prefix.append(self.prefix[-1] * num)
        

    def getProduct(self, k):
        if k >= len(self.prefix):
            return 0
        return self.prefix[-1] // self.prefix[-1 - k]



#Fourth Problem 1353
class Solution(object):
    def maxEvents(self, events):
        events.sort()
    
        min_heap = []  
        day = 0  
        attended = 0  
        i = 0 
        
        while i < len(events) or min_heap:
            if not min_heap:
                day = events[i][0]
            
            while i < len(events) and events[i][0] <= day:
                heapq.heappush(min_heap, events[i][1])
                i += 1
            
            while min_heap and min_heap[0] < day:
                heapq.heappop(min_heap)
            
            if min_heap:
                heapq.heappop(min_heap)
                attended += 1
            
            day += 1
        
        return attended



#Fifth Problem 1358
class Solution(object):
    def numberOfSubstrings(self, s):
        left = 0
        char_count = defaultdict(int)
        total_count = 0

        for right in range(len(s)):
            char_count[s[right]] += 1

            while all(char_count[char] > 0 for char in 'abc'):
                total_count += len(s) - right

                char_count[s[left]] -= 1
                left += 1

        return total_count


End of Day 246
