#First Problem 1208
class Solution(object):
    def equalSubstring(self, s, t, maxCost):
        cost = [abs(ord(s[i]) - ord(t[i])) for i in range(len(s))]
    
        left = 0  
        total_cost = 0  
        max_length = 0  

        for right in range(len(s)):
            total_cost += cost[right]  
            
            while total_cost > maxCost:
                total_cost -= cost[left]
                left += 1

            max_length = max(max_length, right - left + 1)

        return max_length



#Second Problem 1209
class Solution(object):
    def removeDuplicates(self, s, k):
        stack = []  

        for char in s:
            if stack and stack[-1][0] == char:
                stack[-1] = (char, stack[-1][1] + 1)
                if stack[-1][1] == k:
                    stack.pop()
            else:
                stack.append((char, 1))

        result = []
        for char, count in stack:
            result.append(char * count)
        
        return ''.join(result)



#Third Problem 1218
class Solution(object):
    def longestSubsequence(self, arr, difference):
        dp = {} 
        max_length = 0

        for x in arr:
            if x - difference in dp:
                dp[x] = dp[x - difference] + 1
            else:
                dp[x] = 1
            max_length = max(max_length, dp[x])

        return max_length



#Fourth Problem 1219
class Solution(object):
    def getMaximumGold(self, grid):
        def dfs(i, j, current_gold):
            current_gold += grid[i][j]
            
            original = grid[i][j]
            grid[i][j] = 0
            
            max_path_gold = current_gold
            for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:
                if 0 <= x < m and 0 <= y < n and grid[x][y] > 0:
                    max_path_gold = max(max_path_gold, dfs(x, y, current_gold))
            
            grid[i][j] = original
            return max_path_gold

        m, n = len(grid), len(grid[0])
        max_gold = 0

        for i in range(m):
            for j in range(n):
                if grid[i][j] > 0:
                    max_gold = max(max_gold, dfs(i, j, 0))
        
        return max_gold




