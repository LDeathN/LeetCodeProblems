#First Problem (528)
class Solution(object):

    def __init__(self, w):
        self.prefix_sum = []
        current_sum = 0
        
        for weight in w:
            current_sum += weight
            self.prefix_sum.append(current_sum)
        
        self.total_sum = current_sum
        

    def pickIndex(self):
        target = random.randint(1, self.total_sum)

        low, high = 0, len(self.prefix_sum) - 1
        while low < high:
            mid = (low + high) // 2
            if self.prefix_sum[mid] < target:
                low = mid + 1
            else:
                high = mid
        
        return low



#Second Problem (529)
class Solution(object):
    def updateBoard(self, board, click):
        m, n = len(board), len(board[0])

        directions = [(-1, 0), (1, 0), (0, -1), (0, 1), 
                    (-1, -1), (-1, 1), (1, -1), (1, 1)]

        def countMines(x, y):
            count = 0
            for dx, dy in directions:
                nx, ny = x + dx, y + dy
                if 0 <= nx < m and 0 <= ny < n and board[nx][ny] == 'M':
                    count += 1
            return count

        def dfs(x, y):
            mine_count = countMines(x, y)
            if mine_count > 0:
                board[x][y] = str(mine_count)
            else:
                board[x][y] = 'B'
                for dx, dy in directions:
                    nx, ny = x + dx, y + dy
                    if 0 <= nx < m and 0 <= ny < n and board[nx][ny] == 'E':
                        dfs(nx, ny)

        click_row, click_col = click

        if board[click_row][click_col] == 'M':
            board[click_row][click_col] = 'X'
        else:
            dfs(click_row, click_col)
        
        return board




