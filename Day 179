#First Problem (456)
class Solution(object):
    def find132pattern(self, nums):
        third = float('-inf')
        stack = []

        for i in range(len(nums) - 1, -1, -1):
            if nums[i] < third:
                return True
            while stack and stack[-1] < nums[i]:
                third = stack.pop()
            stack.append(nums[i])

        return False



Second Problem (457)
class Solution(object):
    def circularArrayLoop(self, nums):
        n = len(nums)

        def next_index(i):
            return (i + nums[i]) % n

        for i in range(n):
            if nums[i] == 0:
                continue

            slow, fast = i, i

            direction = nums[i] > 0

            while True:
                slow = next_index(slow)
                fast = next_index(fast)
                if nums[fast] * nums[i] <= 0:  
                    break
                fast = next_index(fast)
                if nums[fast] * nums[i] <= 0:  
                    break

                if slow == fast:
                    if slow == next_index(slow):
                        break
                    return True

            slow = i
            while nums[slow] * nums[i] > 0:
                next_idx = next_index(slow)
                nums[slow] = 0
                slow = next_idx

        return False



#Third Problem (462)
class Solution(object):
    def minMoves2(self, nums):
        nums.sort()

        median = nums[len(nums) // 2]

        moves = sum(abs(num - median) for num in nums)
        
        return moves



#Fourth Problem (464)
class Solution(object):
    def canIWin(self, maxChoosableInteger, desiredTotal):
        if desiredTotal <= 0:
            return True

        if (maxChoosableInteger * (maxChoosableInteger + 1)) // 2 < desiredTotal:
            return False

        memo = {}

        def can_win(used_numbers, current_total):
            if used_numbers in memo:
                return memo[used_numbers]

            for i in range(maxChoosableInteger):
                current_bit = 1 << i
                if used_numbers & current_bit == 0:

                    if current_total + (i + 1) >= desiredTotal or not can_win(used_numbers | current_bit, current_total + (i + 1)):
                        memo[used_numbers] = True
                        return True

            memo[used_numbers] = False
            return False

        return can_win(0, 0)



#Fifth Problem (467)
class Solution(object):
    def findSubstringInWraproundString(self, s):
        dp = [0] * 26

        current_length = 0

        for i in range(len(s)):
            if i > 0 and (ord(s[i]) - ord(s[i-1]) == 1 or ord(s[i]) - ord(s[i-1]) == -25):
                current_length += 1
            else:
                current_length = 1

            index = ord(s[i]) - ord('a')
            dp[index] = max(dp[index], current_length)

        return sum(dp)


End of Day 179
