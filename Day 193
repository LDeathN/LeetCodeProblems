#First Problem (654)
class Solution(object):
    def constructMaximumBinaryTree(self, nums):
        if not nums:
            return None

        max_index = nums.index(max(nums))
    
        root = TreeNode(nums[max_index])
        
        root.left = self.constructMaximumBinaryTree(nums[:max_index])
        
        root.right = self.constructMaximumBinaryTree(nums[max_index + 1:])
        
        return root



#Second Problem (655)
class Solution(object):
    def printTree(self, root):
        def get_height(node):
            if not node:
                return -1  
            return 1 + max(get_height(node.left), get_height(node.right))
        
        height = get_height(root)
        m, n = height + 1, 2 ** (height + 1) - 1
        res = [["" for _ in range(n)] for _ in range(m)]

        def fill(res, node, row, col, height):
            if not node:
                return
            res[row][col] = str(node.val)
            offset = 2 ** (height - row - 1)
            if node.left:
                fill(res, node.left, row + 1, col - offset, height)
            if node.right:
                fill(res, node.right, row + 1, col + offset, height)

        fill(res, root, 0, (n - 1) // 2, height)
        return res



#Third Problem (658)
class Solution(object):
    def findClosestElements(self, arr, k, x):
        left, right = 0, len(arr) - 1
        while left < right:
            mid = (left + right) // 2
            if arr[mid] < x:
                left = mid + 1
            else:
                right = mid

        left, right = left - 1, left
        result = []
        
        while k > 0:
            if left < 0:
                result.append(arr[right])
                right += 1
            elif right >= len(arr):
                result.append(arr[left])
                left -= 1
            elif abs(arr[left] - x) <= abs(arr[right] - x):
                result.append(arr[left])
                left -= 1
            else:
                result.append(arr[right])
                right += 1
            k -= 1

        return sorted(result)



#Fourth Problem (659)
class Solution(object):
    def isPossible(self, nums):
        freq = defaultdict(int)
        for num in nums:
            freq[num] += 1
        
        append_needed = defaultdict(int)

        for num in nums:
            if freq[num] == 0:
                continue
            
            if append_needed[num] > 0:
                append_needed[num] -= 1
                append_needed[num + 1] += 1
            
            elif freq[num + 1] > 0 and freq[num + 2] > 0:
                freq[num + 1] -= 1
                freq[num + 2] -= 1
                append_needed[num + 3] += 1
            
            else:
                return False

            freq[num] -= 1

        return True




