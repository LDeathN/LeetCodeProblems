#First Problem (648)
class TrieNode:
    def __init__(self):
        self.children = {}
        self.is_end_of_word = False

class Solution(object):
    def replaceWords(self, dictionary, sentence):
        root_trie = TrieNode()
        
        for root in dictionary:
            current = root_trie
            for char in root:
                if char not in current.children:
                    current.children[char] = TrieNode()
                current = current.children[char]
            current.is_end_of_word = True
        
        def find_root(word):
            current = root_trie
            prefix = ""
            for char in word:
                if char not in current.children:
                    break
                prefix += char
                current = current.children[char]
                if current.is_end_of_word:
                    return prefix
            return word

        words = sentence.split()
        replaced_sentence = " ".join(find_root(word) for word in words)
        return replaced_sentence



#Second Problem (649)
class Solution(object):
    def predictPartyVictory(self, senate):
        radiant = deque()
        dire = deque()

        for i, s in enumerate(senate):
            if s == 'R':
                radiant.append(i)
            else:
                dire.append(i)
        
        n = len(senate)

        while radiant and dire:
            r_index = radiant.popleft()
            d_index = dire.popleft()

            if r_index < d_index:
                radiant.append(r_index + n)  
            else:
                dire.append(d_index + n)    

        return "Radiant" if radiant else "Dire"




