#First Problem 1247
class Solution(object):
    def minimumSwap(self, s1, s2):
        if len(s1) != len(s2):
            return -1

        count_xy = 0
        count_yx = 0

        for c1, c2 in zip(s1, s2):
            if c1 == "x" and c2 == "y":
                count_xy += 1
            elif c1 == "y" and c2 == "x":
                count_yx += 1

        if (count_xy + count_yx) % 2 != 0:
            return -1

        swaps = (count_xy // 2) + (count_yx // 2)
        if count_xy % 2 == 1 and count_yx % 2 == 1:
            swaps += 2

        return swaps



#Second Problem 1248
class Solution(object):
    def numberOfSubarrays(self, nums, k):
        def atMostK(k):
            count = 0
            start = 0
            odd_count = 0

            for end in range(len(nums)):
                if nums[end] % 2 == 1:  
                    odd_count += 1

                while odd_count > k:  
                    if nums[start] % 2 == 1:
                        odd_count -= 1
                    start += 1

                count += end - start + 1  

            return count

        return atMostK(k) - atMostK(k - 1)



#Third Problem 1249
class Solution(object):
    def minRemoveToMakeValid(self, s):
        result = []
        open_count = 0

        for char in s:
            if char == '(':
                open_count += 1
                result.append(char)
            elif char == ')':
                if open_count > 0:  
                    open_count -= 1
                    result.append(char)
            else:
                result.append(char)  

        final_result = []
        open_count = 0

        for char in reversed(result):
            if char == '(':
                if open_count > 0: 
                    open_count -= 1
                    final_result.append(char)
            elif char == ')':
                open_count += 1
                final_result.append(char)
            else:
                final_result.append(char)  

        return ''.join(reversed(final_result))



#Fourth Problem 1253
class Solution(object):
    def reconstructMatrix(self, upper, lower, colsum):
        n = len(colsum)
        upper_row = [0] * n
        lower_row = [0] * n

        for i in range(n):
            if colsum[i] == 2:
                if upper > 0 and lower > 0:
                    upper_row[i] = 1
                    lower_row[i] = 1
                    upper -= 1
                    lower -= 1
                else:
                    return []  
        
        for i in range(n):
            if colsum[i] == 1:
                if upper > 0:
                    upper_row[i] = 1
                    upper -= 1
                elif lower > 0:
                    lower_row[i] = 1
                    lower -= 1
                else:
                    return []  

        if upper == 0 and lower == 0:
            return [upper_row, lower_row]
        else:
            return [] 



#Fifth Problem 1254
class Solution(object):
    def closedIsland(self, grid):
        rows, cols = len(grid), len(grid[0])

        def dfs(r, c):
            if r < 0 or c < 0 or r >= rows or c >= cols:
                return False
            if grid[r][c] == 1:
                return True

            grid[r][c] = 1

            top = dfs(r - 1, c)
            bottom = dfs(r + 1, c)
            left = dfs(r, c - 1)
            right = dfs(r, c + 1)

            return top and bottom and left and right

        closed_islands = 0

        for r in range(rows):
            for c in range(cols):
                if grid[r][c] == 0:
                    if dfs(r, c):  
                        closed_islands += 1

        return closed_islands


End of Day 238
