#First Problem (998)
class Solution(object):
    def insertIntoMaxTree(self, root, val):
        if not root:
            return TreeNode(val)
        
        if val > root.val:
            new_root = TreeNode(val)
            new_root.left = root
            return new_root
        
        root.right = self.insertIntoMaxTree(root.right, val)
        return root



#Second Problem (1003)
class Solution(object):
    def isValid(self, s):
        stack = []
    
        for char in s:
            stack.append(char)
            if len(stack) >= 3 and stack[-3:] == ['a', 'b', 'c']:
                stack.pop() 
                stack.pop()  
                stack.pop()  
        
        return len(stack) == 0



#Third Problem (1004)
class Solution(object):
    def longestOnes(self, nums, k):
        left = 0
        max_length = 0
        zero_count = 0

        for right in range(len(nums)):
            if nums[right] == 0:
                zero_count += 1

            while zero_count > k:
                if nums[left] == 0:
                    zero_count -= 1
                left += 1

            max_length = max(max_length, right - left + 1)

        return max_length



#Fourth Problem (1006)
class Solution(object):
    def clumsy(self, n):
        if n == 1:
            return 1
        if n == 2:
            return 2 * 1
        if n == 3:
            return 3 * 2 // 1
        
        result = n * (n - 1) // (n - 2) + (n - 3)
        n -= 4
        
        while n >= 4:
            result -= n * (n - 1) // (n - 2)
            result += (n - 3)
            n -= 4
        
        if n == 3:
            result -= 3 * 2 // 1
        elif n == 2:
            result -= 2 * 1
        elif n == 1:
            result -= 1
        
        return result




