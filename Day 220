#First Problem (986)
class Solution(object):
    def intervalIntersection(self, firstList, secondList):
        i, j = 0, 0
        result = []
        
        while i < len(firstList) and j < len(secondList):
            start = max(firstList[i][0], secondList[j][0])
            end = min(firstList[i][1], secondList[j][1])
            
            if start <= end:
                result.append([start, end])
            
            if firstList[i][1] < secondList[j][1]:
                i += 1
            else:
                j += 1
        
        return result



#Second Problem (988)
class Solution(object):
    def smallestFromLeaf(self, root):
        def dfs(node, path):
            if not node:
                return
            
            path.append(chr(node.val + ord('a')))
            
            if not node.left and not node.right:
                candidate = ''.join(reversed(path))
                if smallest[0] is None or candidate < smallest[0]:
                    smallest[0] = candidate
            
            dfs(node.left, path)
            dfs(node.right, path)
            
            path.pop()
        
        smallest = [None]  
        dfs(root, [])
        return smallest[0]




