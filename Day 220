#First Problem (986)
class Solution(object):
    def intervalIntersection(self, firstList, secondList):
        i, j = 0, 0
        result = []
        
        while i < len(firstList) and j < len(secondList):
            start = max(firstList[i][0], secondList[j][0])
            end = min(firstList[i][1], secondList[j][1])
            
            if start <= end:
                result.append([start, end])
            
            if firstList[i][1] < secondList[j][1]:
                i += 1
            else:
                j += 1
        
        return result



#Second Problem (988)
class Solution(object):
    def smallestFromLeaf(self, root):
        def dfs(node, path):
            if not node:
                return
            
            path.append(chr(node.val + ord('a')))
            
            if not node.left and not node.right:
                candidate = ''.join(reversed(path))
                if smallest[0] is None or candidate < smallest[0]:
                    smallest[0] = candidate
            
            dfs(node.left, path)
            dfs(node.right, path)
            
            path.pop()
        
        smallest = [None]  
        dfs(root, [])
        return smallest[0]



#Third Problem (990)
class UnionFind:
    def __init__(self, size):
        self.parent = list(range(size))
    
    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])  # Path compression
        return self.parent[x]
    
    def union(self, x, y):
        rootX = self.find(x)
        rootY = self.find(y)
        if rootX != rootY:
            self.parent[rootY] = rootX


class Solution(object):
    def equationsPossible(self, equations):
        uf = UnionFind(26)  
    
        for eq in equations:
            if eq[1] == '=':
                x = ord(eq[0]) - ord('a')
                y = ord(eq[3]) - ord('a')
                uf.union(x, y)
        
        for eq in equations:
            if eq[1] == '!':
                x = ord(eq[0]) - ord('a')
                y = ord(eq[3]) - ord('a')
                if uf.find(x) == uf.find(y):
                    return False
        
        return True



#Fourth Problem (991)
class Solution(object):
    def brokenCalc(self, startValue, target):
        operations = 0
        while target > startValue:
            if target % 2 == 0:
                target //= 2
            else:
                target += 1
            operations += 1
        return operations + (startValue - target)




