First Problem (890)
class Solution(object):
    def findAndReplacePattern(self, words, pattern):
        def matches(word, pattern):
            if len(word) != len(pattern):
                return False
            w_to_p = {}
            p_to_w = {}
            
            for w_char, p_char in zip(word, pattern):
                if w_char in w_to_p and w_to_p[w_char] != p_char:
                    return False
                if p_char in p_to_w and p_to_w[p_char] != w_char:
                    return False
                w_to_p[w_char] = p_char
                p_to_w[p_char] = w_char
        
            return True

        return [word for word in words if matches(word, pattern)]



#Second Problem (893)
class Solution(object):
    def numSpecialEquivGroups(self, words):
        unique_groups = set()

        for word in words:
            even_chars = sorted(word[::2])  
            odd_chars = sorted(word[1::2])  
            unique_groups.add((tuple(even_chars), tuple(odd_chars)))

        return len(unique_groups)



#Third Problem (894)
class Solution(object):
    def allPossibleFBT(self, n):
        memo = {}

        def helper(num_nodes):
            if num_nodes in memo:
                return memo[num_nodes]

            if num_nodes == 1:
                return [TreeNode(0)]
            if num_nodes % 2 == 0:
                return []

            trees = []
            for left_nodes in range(1, num_nodes, 2):
                right_nodes = num_nodes - 1 - left_nodes
                left_trees = helper(left_nodes)
                right_trees = helper(right_nodes)

                for left in left_trees:
                    for right in right_trees:
                        trees.append(TreeNode(0, left, right))

            memo[num_nodes] = trees
            return trees

        return helper(n)



#Fourth Problem (898)
class Solution(object):
    def subarrayBitwiseORs(self, arr):
        result = set()
        current = set()

        for num in arr:
            current = {num | x for x in current} | {num}
            result.update(current)

        return len(result)



#Fifth Problem (900)
class RLEIterator(object):

    def __init__(self, encoding):
        self.encoding = encoding
        self.index = 0
        

    def next(self, n):
        while self.index < len(self.encoding):
            count = self.encoding[self.index]
            value = self.encoding[self.index + 1]

            if n <= count:
                self.encoding[self.index] -= n
                return value
            else:
                n -= count
                self.index += 2

        return -1


End of Day 210
