#First Problem 1227
class Solution(object):
    def nthPersonGetsNthSeat(self, n):
        if n == 1:
            return 1.0
        else:
            return 0.5



#Second Problem 1233
class Solution(object):
    def removeSubfolders(self, folder):
        folder.sort()
        result = []
        
        for f in folder:
            if not result or not f.startswith(result[-1] + '/'):
                result.append(f)
        
        return result



#Third Problem 1234
class Solution(object):
    def balancedString(self, s):
        n = len(s)
        target = n // 4
        count = Counter(s)
        
        excess = {char: max(0, count[char] - target) for char in "QWER"}
        if all(value == 0 for value in excess.values()):
            return 0
        
        left = 0
        min_length = n
        for right in range(n):
            if s[right] in excess:
                excess[s[right]] -= 1
            
            while all(value <= 0 for value in excess.values()):
                min_length = min(min_length, right - left + 1)
                if s[left] in excess:
                    excess[s[left]] += 1
                left += 1
        
        return min_length



#Fourth Problem 1238
class Solution(object):
    def circularPermutation(self, n, start):
        gray_code = [i ^ (i >> 1) for i in range(1 << n)]
    
        start_index = gray_code.index(start)
        result = gray_code[start_index:] + gray_code[:start_index]
        
        return result




