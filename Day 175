#First Problem (423)
class Solution(object):
    def originalDigits(self, s):
        from collections import Counter
        count = Counter(s)

        digits = [0] * 10

        digits[0] = count['z']  
        digits[2] = count['w']  
        digits[4] = count['u']  
        digits[6] = count['x']  
        digits[8] = count['g']  

        digits[3] = count['h'] - digits[8]  
        digits[5] = count['f'] - digits[4]  
        digits[7] = count['s'] - digits[6]  
        digits[1] = count['o'] - digits[0] - digits[2] - digits[4] 
        digits[9] = count['i'] - digits[5] - digits[6] - digits[8]  
        result = []
        for i in range(10):
            result.append(str(i) * digits[i])

        return ''.join(result))



#Second Problem (424)
class Solution(object):
    def characterReplacement(self, s, k):
        count = [0] * 26
        left = 0
        max_length = 0
        max_freq = 0  

        for right in range(len(s)):
            index = ord(s[right]) - ord('A')
            count[index] += 1

            max_freq = max(max_freq, count[index])

            while (right - left + 1) - max_freq > k:
                count[ord(s[left]) - ord('A')] -= 1
                left += 1 

            max_length = max(max_length, right - left + 1)

        return max_length



#Third Problem (427)
class Solution(object):
    def construct(self, grid):
        def is_uniform(x1, y1, x2, y2):
            val = grid[x1][y1]
            for i in range(x1, x2):
                for j in range(y1, y2):
                    if grid[i][j] != val:
                        return False
            return True

        def build(x1, y1, x2, y2):
            if is_uniform(x1, y1, x2, y2):
                return Node(val=grid[x1][y1] == 1, isLeaf=True)
            else:
                mid_x = (x1 + x2) // 2
                mid_y = (y1 + y2) // 2
                topLeft = build(x1, y1, mid_x, mid_y)
                topRight = build(x1, mid_y, mid_x, y2)
                bottomLeft = build(mid_x, y1, x2, mid_y)
                bottomRight = build(mid_x, mid_y, x2, y2)
                return Node(val=True, isLeaf=False, topLeft=topLeft, topRight=topRight, bottomLeft=bottomLeft, bottomRight=bottomRight)

        return build(0, 0, len(grid), len(grid[0]))




