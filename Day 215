#First Problem (945)
class Solution(object):
    def minIncrementForUnique(self, nums):
        nums.sort() 
        moves = 0

        for i in range(1, len(nums)):
            if nums[i] <= nums[i - 1]:  
                increment = nums[i - 1] + 1 - nums[i] 
                nums[i] = nums[i - 1] + 1
                moves += increment  
        
        return moves



#Second Problem (946)
class Solution(object):
    def validateStackSequences(self, pushed, popped):
        stack = []
        j = 0 

        for x in pushed:
            stack.append(x)  
            while stack and stack[-1] == popped[j]:
                stack.pop()
                j += 1
        
        return not stack



#Third Problem (948)
class Solution(object):
    def bagOfTokensScore(self, tokens, power):
        tokens.sort()
    
        score = 0
        max_score = 0
        i, j = 0, len(tokens) - 1
        
        while i <= j:
            if power >= tokens[i]:
                power -= tokens[i]
                score += 1
                i += 1
                max_score = max(max_score, score)
            elif score > 0:
                power += tokens[j]
                score -= 1
                j -= 1
            else:
                break
        
        return max_score



#Fourth Problem (949)
class Solution(object):
    def largestTimeFromDigits(self, arr):
        max_time = -1
        for perm in permutations(arr):
            hours = perm[0] * 10 + perm[1]  
            minutes = perm[2] * 10 + perm[3]  
            
            if hours < 24 and minutes < 60:
                max_time = max(max_time, hours * 60 + minutes)
        
        if max_time == -1:
            return ""

        hours = max_time // 60
        minutes = max_time % 60
        return '{:02}:{:02}'.format(hours, minutes)




