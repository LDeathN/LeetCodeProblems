#First Problem (539)
class Solution(object):
    def findMinDifference(self, timePoints):
        minutes = []
        for time in timePoints:
            hours, mins = map(int, time.split(":"))
            total_minutes = hours * 60 + mins
            minutes.append(total_minutes)

        minutes.sort()

        min_diff = 1440 + minutes[0] - minutes[-1] 

        for i in range(1, len(minutes)):
            min_diff = min(min_diff, minutes[i] - minutes[i - 1])
        
        return min_diff



#Second Problem (540)
class Solution(object):
    def singleNonDuplicate(self, nums):
        left, right = 0, len(nums) - 1
    
        while left < right:
            mid = left + (right - left) // 2
            
            if mid % 2 == 1:
                mid -= 1
                
            if nums[mid] == nums[mid + 1]:
                left = mid + 2
            else:
                right = mid
                
        return nums[left]



#Third Problem (542)
class Solution(object):
    from collections import deque
    def updateMatrix(self, mat):
        m, n = len(mat), len(mat[0])
        dist = [[float('inf')] * n for _ in range(m)]
        queue = deque()

        for i in range(m):
            for j in range(n):
                if mat[i][j] == 0:
                    dist[i][j] = 0
                    queue.append((i, j))

        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]

        while queue:
            x, y = queue.popleft()
            for dx, dy in directions:
                nx, ny = x + dx, y + dy

                if 0 <= nx < m and 0 <= ny < n and dist[nx][ny] > dist[x][y] + 1:
                    dist[nx][ny] = dist[x][y] + 1
                    queue.append((nx, ny))

        return dist



#Fourth Problem (547)
class Solution(object):
    def findCircleNum(self, isConnected):
        n = len(isConnected)
        visited = [False] * n
        provinces = 0

        def dfs(city):
            for neighbor in range(n):
                if isConnected[city][neighbor] == 1 and not visited[neighbor]:
                    visited[neighbor] = True
                    dfs(neighbor)

        for city in range(n):
            if not visited[city]:
                provinces += 1
                visited[city] = True
                dfs(city)

        return provinces



#Fifth Problem (553)
class Solution(object):
    def optimalDivision(self, nums):
        if len(nums) == 1:
            return str(nums[0])
        elif len(nums) == 2:
            return "{}/{}".format(nums[0], nums[1])
        else:
            return "{}/({})".format(nums[0], "/".join(map(str, nums[1:])))


End of Day 186
