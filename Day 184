#First Problem (522)
class Solution(object):
    def findLUSlength(self, strs):
        def is_subsequence(s1, s2):
            i = 0
            for c in s2:
                if i < len(s1) and s1[i] == c:
                    i += 1
            return i == len(s1)

        strs.sort(key=len, reverse=True)

        for i, s1 in enumerate(strs):
            if all(not is_subsequence(s1, strs[j]) for j in range(len(strs)) if i != j):
                return len(s1)

        return -1



#Second Problem (523)
class Solution(object):
    def checkSubarraySum(self, nums, k):
        remainder_map = {0: -1}
        cumulative_sum = 0
        
        for i, num in enumerate(nums):
            cumulative_sum += num
            if k != 0:
                cumulative_sum %= k

            if cumulative_sum in remainder_map:
                if i - remainder_map[cumulative_sum] > 1:
                    return True
            else:
                remainder_map[cumulative_sum] = i
        
        return False



#Third Problem (524)
class Solution(object):
    def findLongestWord(self, s, dictionary):
        def is_subsequence(word, s):
            i, j = 0, 0
            while i < len(word) and j < len(s):
                if word[i] == s[j]:
                    i += 1
                j += 1
            return i == len(word)

        dictionary.sort(key=lambda word: (-len(word), word))

        for word in dictionary:
            if is_subsequence(word, s):
                return word

        return ""




