#First Problem 1481
class Solution(object):
    def findLeastNumOfUniqueInts(self, arr, k):
        freq = Counter(arr)
    
        heap = list(freq.values())
        heapq.heapify(heap)
        
        while k > 0:
            smallest = heapq.heappop(heap)
            if k >= smallest:
                k -= smallest
            else:
                heapq.heappush(heap, smallest - k)
                break
        
        return len(heap)



#Second Problem 1482
class Solution(object):
    def minDays(self, bloomDay, m, k):
        if m * k > len(bloomDay):
            return -1

        def canMakeBouquets(days):
            bouquets = 0
            flowers = 0

            for bloom in bloomDay:
                if bloom <= days:
                    flowers += 1
                    if flowers == k:
                        bouquets += 1
                        flowers = 0
                else:
                    flowers = 0

                if bouquets >= m:
                    return True

            return False

        left, right = min(bloomDay), max(bloomDay)

        while left < right:
            mid = (left + right) // 2
            if canMakeBouquets(mid):
                right = mid  
            else:
                left = mid + 1  

        return left



#Third Problem 1487
class Solution(object):
    def getFolderNames(self, names):
        name_count = {}
        result = []

        for name in names:
            if name not in name_count:
                result.append(name)
                name_count[name] = 1
            else:
                k = name_count[name]
                while name + "(" + str(k) + ")" in name_count:
                    k += 1
                new_name = name + "(" + str(k) + ")"
                result.append(new_name)
                name_count[name] = k + 1
                name_count[new_name] = 1

        return result



#Fourth Problem 1488
class Solution(object):
    def avoidFlood(self, rains):
        n = len(rains)
        lake_map = {}
        dry_days = []
        ans = [-1] * n  

        for i in range(n):
            if rains[i] > 0:
                lake = rains[i]
                if lake in lake_map:
                    idx = -1
                    for j, day in enumerate(dry_days):
                        if day > lake_map[lake]:
                            idx = j
                            break
                    if idx == -1:
                        return []  
                    ans[dry_days[idx]] = lake
                    dry_days.pop(idx)
                lake_map[lake] = i
            else:
                dry_days.append(i)
                ans[i] = 1  

        return ans




