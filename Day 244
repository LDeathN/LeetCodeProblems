#First Problem 1325
class Solution(object):
    def removeLeafNodes(self, root, target):
        if not root:  
            return None

        root.left = self.removeLeafNodes(root.left, target)
        root.right = self.removeLeafNodes(root.right, target)

        if not root.left and not root.right and root.val == target:
            return None

        return root



#Second Problem 1328
class Solution(object):
    def breakPalindrome(self, palindrome):
        n = len(palindrome)
        if n == 1:
            return ""
        
        for i in range(n // 2):
            if palindrome[i] != 'a':
                return palindrome[:i] + 'a' + palindrome[i+1:]
        
        return palindrome[:-1] + 'b'



#Third Problem 1329
class Solution(object):
    def diagonalSort(self, mat):
        m, n = len(mat), len(mat[0])
        diagonals = defaultdict(list)

        for i in range(m):
            for j in range(n):
                diagonals[i - j].append(mat[i][j])

        for key in diagonals:
            diagonals[key].sort()

        for i in range(m):
            for j in range(n):
                mat[i][j] = diagonals[i - j].pop(0)

        return mat




