#First Problem 1325
class Solution(object):
    def removeLeafNodes(self, root, target):
        if not root:  
            return None

        root.left = self.removeLeafNodes(root.left, target)
        root.right = self.removeLeafNodes(root.right, target)

        if not root.left and not root.right and root.val == target:
            return None

        return root



#Second Problem 1328
class Solution(object):
    def breakPalindrome(self, palindrome):
        n = len(palindrome)
        if n == 1:
            return ""
        
        for i in range(n // 2):
            if palindrome[i] != 'a':
                return palindrome[:i] + 'a' + palindrome[i+1:]
        
        return palindrome[:-1] + 'b'



#Third Problem 1329
class Solution(object):
    def diagonalSort(self, mat):
        m, n = len(mat), len(mat[0])
        diagonals = defaultdict(list)

        for i in range(m):
            for j in range(n):
                diagonals[i - j].append(mat[i][j])

        for key in diagonals:
            diagonals[key].sort()

        for i in range(m):
            for j in range(n):
                mat[i][j] = diagonals[i - j].pop(0)

        return mat



#Fourth Problem 1333
class Solution(object):
    def filterRestaurants(self, restaurants, veganFriendly, maxPrice, maxDistance):
        filtered = [
            r for r in restaurants
            if (veganFriendly == 0 or r[2] == 1) and r[3] <= maxPrice and r[4] <= maxDistance
        ]

        sorted_restaurants = sorted(filtered, key=lambda x: (-x[1], -x[0]))

        return [r[0] for r in sorted_restaurants]



#Fifth Problem 1334
class Solution(object):
    def findTheCity(self, n, edges, distanceThreshold):
        dist = [[float('inf')] * n for _ in range(n)]
        for i in range(n):
            dist[i][i] = 0  
        for u, v, w in edges:
            dist[u][v] = w
            dist[v][u] = w
        
        for k in range(n):
            for i in range(n):
                for j in range(n):
                    if dist[i][j] > dist[i][k] + dist[k][j]:
                        dist[i][j] = dist[i][k] + dist[k][j]
        
        reachable = []
        for i in range(n):
            count = sum(1 for j in range(n) if dist[i][j] <= distanceThreshold)
            reachable.append((count, i))
        
        reachable.sort(key=lambda x: (x[0], -x[1]))
        return reachable[0][1]


End of Day 244
