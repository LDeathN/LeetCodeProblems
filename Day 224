#First Problem (1026)
class Solution(object):
    def maxAncestorDiff(self, root):
        def dfs(node, min_val, max_val):
            if not node:
                return max_val - min_val
            
            min_val = min(min_val, node.val)
            max_val = max(max_val, node.val)
            
            left_diff = dfs(node.left, min_val, max_val)
            right_diff = dfs(node.right, min_val, max_val)
            
            return max(left_diff, right_diff)
        
        return dfs(root, root.val, root.val)



#Second Problem (1027)
class Solution(object):
    def longestArithSeqLength(self, nums):
        dp = defaultdict(int)
        max_length = 0
        
        for i in range(len(nums)):
            for j in range(i):
                diff = nums[i] - nums[j]
                dp[(i, diff)] = dp[(j, diff)] + 1
                max_length = max(max_length, dp[(i, diff)])
        
        return max_length + 1



#Third Problem (1029)
class Solution(object):
    def twoCitySchedCost(self, costs):
        costs.sort(key=lambda x: x[0] - x[1])
    
        total_cost = 0
        n = len(costs) // 2
        
        for i in range(n):
            total_cost += costs[i][0]  
        for i in range(n, 2 * n):
            total_cost += costs[i][1]  
        
        return total_cost



#Fourth Problem (1031)
class Solution(object):
    def maxSumTwoNoOverlap(self, nums, firstLen, secondLen):
        def maxSumHelper(A, L, M):
            n = len(A)
            prefix_sum = [0] * (n + 1)
            
            for i in range(n):
                prefix_sum[i + 1] = prefix_sum[i] + A[i]
            
            maxL = maxSum = 0
            
            for i in range(L + M, n + 1):
                maxL = max(maxL, prefix_sum[i - M] - prefix_sum[i - M - L])  
                maxSum = max(maxSum, maxL + prefix_sum[i] - prefix_sum[i - M]) 
            return maxSum
        
        return max(maxSumHelper(nums, firstLen, secondLen), maxSumHelper(nums, secondLen, firstLen))




