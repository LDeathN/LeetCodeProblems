#First Problem (1026)
class Solution(object):
    def maxAncestorDiff(self, root):
        def dfs(node, min_val, max_val):
            if not node:
                return max_val - min_val
            
            min_val = min(min_val, node.val)
            max_val = max(max_val, node.val)
            
            left_diff = dfs(node.left, min_val, max_val)
            right_diff = dfs(node.right, min_val, max_val)
            
            return max(left_diff, right_diff)
        
        return dfs(root, root.val, root.val)



#Second Problem (1027)
class Solution(object):
    def longestArithSeqLength(self, nums):
        dp = defaultdict(int)
        max_length = 0
        
        for i in range(len(nums)):
            for j in range(i):
                diff = nums[i] - nums[j]
                dp[(i, diff)] = dp[(j, diff)] + 1
                max_length = max(max_length, dp[(i, diff)])
        
        return max_length + 1




