#First Problem (959)
class UnionFind:
    def __init__(self, size):
        self.parent = list(range(size))
        self.rank = [1] * size
    
    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]
    
    def union(self, x, y):
        rootX = self.find(x)
        rootY = self.find(y)
        if rootX != rootY:
            if self.rank[rootX] > self.rank[rootY]:
                self.parent[rootY] = rootX
            elif self.rank[rootX] < self.rank[rootY]:
                self.parent[rootX] = rootY
            else:
                self.parent[rootY] = rootX
                self.rank[rootX] += 1
    
    def count_components(self):
        return len(set(self.find(x) for x in range(len(self.parent))))

class Solution(object):
    def regionsBySlashes(self, grid):
        n = len(grid)
        size = 4 * n * n  
        uf = UnionFind(size)
        
        for r in range(n):
            for c in range(n):
                index = 4 * (r * n + c)
                char = grid[r][c]
                
                if char == '/':
                    uf.union(index + 0, index + 3)
                    uf.union(index + 1, index + 2)
                elif char == '\\':
                    uf.union(index + 0, index + 1)
                    uf.union(index + 2, index + 3)
                else:
                    uf.union(index + 0, index + 1)
                    uf.union(index + 1, index + 2)
                    uf.union(index + 2, index + 3)
                
                if c + 1 < n:  
                    uf.union(index + 1, 4 * (r * n + c + 1) + 3)
                if r + 1 < n:  
                    uf.union(index + 2, 4 * ((r + 1) * n + c) + 0)
        
        return uf.count_components()




