#First Problem (959)
class UnionFind:
    def __init__(self, size):
        self.parent = list(range(size))
        self.rank = [1] * size
    
    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]
    
    def union(self, x, y):
        rootX = self.find(x)
        rootY = self.find(y)
        if rootX != rootY:
            if self.rank[rootX] > self.rank[rootY]:
                self.parent[rootY] = rootX
            elif self.rank[rootX] < self.rank[rootY]:
                self.parent[rootX] = rootY
            else:
                self.parent[rootY] = rootX
                self.rank[rootX] += 1
    
    def count_components(self):
        return len(set(self.find(x) for x in range(len(self.parent))))

class Solution(object):
    def regionsBySlashes(self, grid):
        n = len(grid)
        size = 4 * n * n  
        uf = UnionFind(size)
        
        for r in range(n):
            for c in range(n):
                index = 4 * (r * n + c)
                char = grid[r][c]
                
                if char == '/':
                    uf.union(index + 0, index + 3)
                    uf.union(index + 1, index + 2)
                elif char == '\\':
                    uf.union(index + 0, index + 1)
                    uf.union(index + 2, index + 3)
                else:
                    uf.union(index + 0, index + 1)
                    uf.union(index + 1, index + 2)
                    uf.union(index + 2, index + 3)
                
                if c + 1 < n:  
                    uf.union(index + 1, 4 * (r * n + c + 1) + 3)
                if r + 1 < n:  
                    uf.union(index + 2, 4 * ((r + 1) * n + c) + 0)
        
        return uf.count_components()



#Second Problem (962)
class Solution(object):
    def maxWidthRamp(self, nums):
        n = len(nums)
        indexed_nums = [(nums[i], i) for i in range(n)]
        
        indexed_nums.sort()
        
        min_index = float('inf')
        max_width = 0
        
        for value, index in indexed_nums:
            max_width = max(max_width, index - min_index)
            min_index = min(min_index, index)
        
        return max_width



#Third Problem (966)
class Solution(object):
    def spellchecker(self, wordlist, queries):
        def normalize_vowels(word):
            return ''.join('*' if c in 'aeiou' else c for c in word.lower())
        
        words_exact = set(wordlist)
        
        words_lower = {}
        for word in wordlist:
            words_lower.setdefault(word.lower(), word)
        
        words_vowel = {}
        for word in wordlist:
            norm = normalize_vowels(word)
            words_vowel.setdefault(norm, word)
        
        result = []
        for query in queries:
            if query in words_exact:
                result.append(query)  
            elif query.lower() in words_lower:
                result.append(words_lower[query.lower()])  
            else:
                norm_query = normalize_vowels(query)
                if norm_query in words_vowel:
                    result.append(words_vowel[norm_query]) 
                else:
                    result.append('')  
        
        return result



#Fourth Problem (967)
class Solution(object):
    def numsSameConsecDiff(self, n, k):
        def dfs(current, length):
            if length == n:
                result.append(current)
                return
            
            last_digit = current % 10
            next_digits = set([last_digit + k, last_digit - k])
            
            for next_digit in next_digits:
                if 0 <= next_digit <= 9:
                    dfs(current * 10 + next_digit, length + 1)
        
        result = []
        for i in range(1, 10):
            dfs(i, 1)  
        
        return result



#Fifth Problem (969)
class Solution(object):
    def pancakeSort(self, arr):
        def flip(sub_arr, k):
            sub_arr[:k] = reversed(sub_arr[:k])
        
        result = []
        n = len(arr)
        
        for target in range(n, 0, -1):
            index = arr.index(target)
            
            if index == target - 1:
                continue 
            
            if index != 0:
                result.append(index + 1)
                flip(arr, index + 1)
            
            result.append(target)
            flip(arr, target)
        
        return result


End of Day 217
