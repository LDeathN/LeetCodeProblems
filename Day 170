First Problem (372)
class Solution(object):
    def superPow(self, a, b):
        def pow_mod(x, n, mod):
            res = 1
            while n > 0:
                if n % 2 == 1:
                    res = (res * x) % mod
                x = (x * x) % mod
                n //= 2
            return res

        MOD = 1337

        result = 1

        for digit in b:
            result = pow_mod(result, 10, MOD) * pow_mod(a, digit, MOD) % MOD

        return result



#Second Problem (373)
class Solution(object):
    def kSmallestPairs(self, nums1, nums2, k):
        import heapq

        if not nums1 or not nums2 or k == 0:
            return []

        min_heap = []

        for i in range(min(k, len(nums1))):
            heapq.heappush(min_heap, (nums1[i] + nums2[0], i, 0))

        result = []

        while k > 0 and min_heap:
            sum_val, i, j = heapq.heappop(min_heap)
            result.append([nums1[i], nums2[j]])
            k -= 1

            if j + 1 < len(nums2):
                heapq.heappush(min_heap, (nums1[i] + nums2[j + 1], i, j + 1))

        return result



#Third Problem (375)
class Solution(object):
    def getMoneyAmount(self, n):
        dp = [[0] * (n + 1) for _ in range(n + 1)]

        for length in range(2, n + 1): 
            for start in range(1, n - length + 2):  
                end = start + length - 1
                dp[start][end] = float('inf')
                for x in range(start, end):
                    cost = x + max(dp[start][x - 1], dp[x + 1][end])
                    dp[start][end] = min(dp[start][end], cost)

        return dp[1][n]



#Fourth Problem (376)
class Solution(object):
    def wiggleMaxLength(self, nums):
        if len(nums) < 2:
            return len(nums)

        up = down = 1

        for i in range(1, len(nums)):
            if nums[i] > nums[i - 1]:
                up = down + 1
            elif nums[i] < nums[i - 1]:
                down = up + 1

        return max(up, down)



#Fifth Problem (377)
class Solution(object):
    def combinationSum4(self, nums, target):
        dp = [0] * (target + 1)

        dp[0] = 1

        for i in range(1, target + 1):
            for num in nums:
                if i >= num:
                    dp[i] += dp[i - num]

        return dp[target]

End of Day 170
