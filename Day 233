#First Problem 1158
SELECT 
    u.user_id AS buyer_id, 
    u.join_date, 
    COALESCE(COUNT(o.order_id), 0) AS orders_in_2019
FROM 
    Users u
LEFT JOIN 
    Orders o
ON 
    u.user_id = o.buyer_id 
    AND o.order_date BETWEEN '2019-01-01' AND '2019-12-31'
GROUP BY 
    u.user_id, u.join_date
ORDER BY 
    u.user_id;



#Second Problem 1161
class Solution(object):
    def maxLevelSum(self, root):
        if not root:
            return 0
        
        queue = deque([(root, 1)])  
        level_sums = {}
        
        while queue:
            node, level = queue.popleft()
            
            if level in level_sums:
                level_sums[level] += node.val
            else:
                level_sums[level] = node.val
            
            if node.left:
                queue.append((node.left, level + 1))
            if node.right:
                queue.append((node.right, level + 1))
        
        max_sum = float('-inf')
        result_level = 0
        for level, total in level_sums.items():
            if total > max_sum:
                max_sum = total
                result_level = level
        
        return result_level



#Third Problem 1162
class Solution(object):
    def maxDistance(self, grid):
        n = len(grid)
    
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        
        queue = deque()
        for i in range(n):
            for j in range(n):
                if grid[i][j] == 1:
                    queue.append((i, j, 0))  
        
        if len(queue) == 0 or len(queue) == n * n:
            return -1
        
        max_dist = -1
        while queue:
            x, y, dist = queue.popleft()
            
            for dx, dy in directions:
                nx, ny = x + dx, y + dy
                if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == 0:  
                    grid[nx][ny] = dist + 1  
                    max_dist = max(max_dist, dist + 1)
                    queue.append((nx, ny, dist + 1))
        
        return max_dist



#Fourth Problem 1164
SELECT p.product_id,
       COALESCE(
           (SELECT new_price
            FROM Products p2
            WHERE p2.product_id = p.product_id 
              AND p2.change_date <= '2019-08-16'
            ORDER BY p2.change_date DESC
            LIMIT 1), 10) AS price
FROM (SELECT DISTINCT product_id FROM Products) p;




