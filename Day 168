#First Problem (324)
class Solution(object):
    def wiggleSort(self, nums):
        def virtualIndex(i, n):
            return (1 + 2 * i) % (n | 1)

        def findKthLargest(nums, k):
            def partition(left, right, pivot_index):
                pivot = nums[pivot_index]
                nums[pivot_index], nums[right] = nums[right], nums[pivot_index]
                store_index = left
                for i in range(left, right):
                    if nums[i] < pivot:
                        nums[store_index], nums[i] = nums[i], nums[store_index]
                        store_index += 1
                nums[right], nums[store_index] = nums[store_index], nums[right]
                return store_index
            
            def select(left, right, k_smallest):
                if left == right:  
                    return nums[left]
                pivot_index = left + (right - left) // 2
                pivot_index = partition(left, right, pivot_index)
                if k_smallest == pivot_index:
                    return nums[k_smallest]
                elif k_smallest < pivot_index:
                    return select(left, pivot_index - 1, k_smallest)
                else:
                    return select(pivot_index + 1, right, k_smallest)
            
            return select(0, len(nums) - 1, len(nums) - k)

        n = len(nums)
        median = findKthLargest(nums, (n + 1) // 2)

        left, right, i = 0, n - 1, 0
        while i <= right:
            vi = virtualIndex(i, n)
            vleft = virtualIndex(left, n)
            vright = virtualIndex(right, n)
            
            if nums[vi] > median:
                nums[vi], nums[vleft] = nums[vleft], nums[vi]
                left += 1
                i += 1
            elif nums[vi] < median:
                nums[vi], nums[vright] = nums[vright], nums[vi]
                right -= 1
            else:
                i += 1



#Second Problem (328)
class Solution(object):
    def oddEvenList(self, head):
        if not head or not head.next:
            return head

        odd = head
        even = head.next
        evenHead = even  

        while even and even.next:
            odd.next = even.next
            odd = odd.next

            even.next = odd.next
            even = even.next

        odd.next = evenHead

        return head



#Third Problem (331)
class Solution(object):
    def isValidSerialization(self, preorder):
        nodes = preorder.split(',')

        slots = 1

        for node in nodes:
            slots -= 1
            
            if slots < 0:
                return False

            if node != '#':
                slots += 2

        return slots == 0



#Fourth Problem (334)
class Solution(object):
    def increasingTriplet(self, nums):
        first_min = float('inf')
        second_min = float('inf')
        
        for num in nums:
            if num <= first_min:
                first_min = num  
            elif num <= second_min:
                second_min = num  
            else:
                return True
        
        return False




