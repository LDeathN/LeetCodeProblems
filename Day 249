#First Problem 1387
class Solution(object):
    def getKth(self, lo, hi, k):
        power_cache = {}

        def calculate_power(x):
            if x == 1:
                return 0
            if x in power_cache:
                return power_cache[x]
            if x % 2 == 0:
                power_cache[x] = 1 + calculate_power(x // 2)
            else:
                power_cache[x] = 1 + calculate_power(3 * x + 1)
            return power_cache[x]

        sorted_range = sorted(range(lo, hi + 1), key=lambda x: (calculate_power(x), x))

        return sorted_range[k - 1]



#Second Problem 1390
class Solution(object):
    def sumFourDivisors(self, nums):
        def find_divisors(num):
            divisors = set()
            for i in range(1, int(num**0.5) + 1):
                if num % i == 0:
                    divisors.add(i)
                    divisors.add(num // i)
                if len(divisors) > 4:  
                    return []
            return divisors if len(divisors) == 4 else []

        total_sum = 0
        for num in nums:
            divisors = find_divisors(num)
            if divisors:
                total_sum += sum(divisors)

        return total_sum




