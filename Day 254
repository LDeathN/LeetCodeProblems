#First Problem 1456
class Solution(object):
    def maxVowels(self, s, k):
        vowels = {'a', 'e', 'i', 'o', 'u'}
        max_count = 0
        current_count = 0

        for i in range(k):
            if s[i] in vowels:
                current_count += 1
        max_count = current_count

        for i in range(k, len(s)):
            if s[i - k] in vowels:
                current_count -= 1
            if s[i] in vowels:
                current_count += 1
            max_count = max(max_count, current_count)

        return max_count



#Second Problem 1457
class Solution(object):
    def pseudoPalindromicPaths (self, root):
        def dfs(node, mask):
            if not node:
                return 0
            
            mask ^= (1 << node.val)
            
            if not node.left and not node.right:
                return 1 if mask & (mask - 1) == 0 else 0
            
            return dfs(node.left, mask) + dfs(node.right, mask)
        
        return dfs(root, 0)



#Third Problem 1461
class Solution(object):
    def hasAllCodes(self, s, k):
        seen = set()
        n = len(s)
        
        for i in range(n - k + 1):
            substring = s[i:i + k]
            seen.add(substring)
        
        return len(seen) == 2**k



#Fourth Problem 1462
class Solution(object):
    def checkIfPrerequisite(self, numCourses, prerequisites, queries):
        reachable = [[False] * numCourses for _ in range(numCourses)]
    
        for a, b in prerequisites:
            reachable[a][b] = True
        
        for k in range(numCourses):
            for i in range(numCourses):
                for j in range(numCourses):
                    if reachable[i][k] and reachable[k][j]:
                        reachable[i][j] = True
        
        result = []
        for u, v in queries:
            result.append(reachable[u][v])
        
        return result



#Fifth Problem 1465
class Solution(object):
    def maxArea(self, h, w, horizontalCuts, verticalCuts):
        MOD = 10**9 + 7
    
        horizontalCuts.sort()
        verticalCuts.sort()
        
        horizontalCuts = [0] + horizontalCuts + [h]
        verticalCuts = [0] + verticalCuts + [w]
        
        max_h_gap = max(horizontalCuts[i] - horizontalCuts[i - 1] for i in range(1, len(horizontalCuts)))
        max_v_gap = max(verticalCuts[i] - verticalCuts[i - 1] for i in range(1, len(verticalCuts)))
        
        return (max_h_gap * max_v_gap) % MOD


End of Day 254
