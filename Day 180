#First Problem (468)
class Solution(object):
    def validIPAddress(self, queryIP):
        def isIPv4(s):
            parts = s.split(".")
            if len(parts) != 4:
                return False
            for part in parts:
                if not part.isdigit() or not 0 <= int(part) <= 255:
                    return False
                if part[0] == '0' and len(part) > 1:  
                    return False
            return True

        def isIPv6(s):
            parts = s.split(":")
            if len(parts) != 8:
                return False
            hex_digits = "0123456789abcdefABCDEF"
            for part in parts:
                if not (1 <= len(part) <= 4):
                    return False
                if not all(c in hex_digits for c in part):
                    return False
            return True

        if isIPv4(queryIP):
            return "IPv4"
   
        if isIPv6(queryIP):
            return "IPv6"

        return "Neither"



#Second Problem (470)
import random
class Solution(object):
    def rand10(self):
        while True:
            num = (rand7() - 1) * 7 + rand7()
            if num <= 40:
                return (num % 10) + 1



#Third Problem (473)
class Solution(object):
    def makesquare(self, matchsticks):
        total_length = sum(matchsticks)

        if total_length % 4 != 0:
            return False

        target_length = total_length // 4

        matchsticks.sort(reverse=True)

        sides = [0] * 4
        
        def backtrack(index):
            if index == len(matchsticks):
                return sides[0] == sides[1] == sides[2] == sides[3] == target_length

            for i in range(4):
                if sides[i] + matchsticks[index] <= target_length:
                    sides[i] += matchsticks[index]

                    if backtrack(index + 1):
                        return True

                    sides[i] -= matchsticks[index]

                if sides[i] == 0:
                    break
            
            return False

        return backtrack(0)



#Fourth Problem (474)
class Solution(object):
    def findMaxForm(self, strs, m, n):
        dp = [[0] * (n + 1) for _ in range(m + 1)]

        for s in strs:
            zeros = s.count('0')
            ones = s.count('1')

            for i in range(m, zeros - 1, -1):
                for j in range(n, ones - 1, -1):
                    dp[i][j] = max(dp[i][j], dp[i - zeros][j - ones] + 1)

        return dp[m][n]



#Fifth Problem (475)
class Solution(object):
    import bisect
    def findRadius(self, houses, heaters):
        houses.sort()
        heaters.sort()

        min_radius = 0

        for house in houses:
            index = bisect.bisect_left(heaters, house)

            right_distance = float('inf')
            if index < len(heaters):
                right_distance = heaters[index] - house

            left_distance = float('inf')
            if index > 0:
                left_distance = house - heaters[index - 1]

            closest_distance = min(left_distance, right_distance)

            min_radius = max(min_radius, closest_distance)
        
        return min_radius


End of Day 180
