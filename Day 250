#First Problem 1401
class Solution(object):
    def checkOverlap(self, radius, xCenter, yCenter, x1, y1, x2, y2):
        closestX = max(x1, min(xCenter, x2))
        closestY = max(y1, min(yCenter, y2))
        
        distanceSquared = (xCenter - closestX) ** 2 + (yCenter - closestY) ** 2
        
        return distanceSquared <= radius ** 2



#Second Problem 1404
class Solution(object):
    def numSteps(self, s):
        num = int(s, 2)
        steps = 0

        while num != 1:
            if num % 2 == 0: 
                num //= 2
            else:  
                num += 1
            steps += 1

        return steps



#Third Problem 1405
class Solution(object):
    def longestDiverseString(self, a, b, c):
        heap = []
        if a > 0: heappush(heap, (-a, 'a'))
        if b > 0: heappush(heap, (-b, 'b'))
        if c > 0: heappush(heap, (-c, 'c'))

        result = []

        while heap:
            count1, char1 = heappop(heap) 
            if len(result) >= 2 and result[-1] == result[-2] == char1:
                if not heap:
                    break  
                count2, char2 = heappop(heap)  
                result.append(char2)
                if count2 + 1 < 0: 
                    heappush(heap, (count2 + 1, char2))
                heappush(heap, (count1, char1))  
            else:
                result.append(char1)
                if count1 + 1 < 0: 
                    heappush(heap, (count1 + 1, char1))

        return ''.join(result)




