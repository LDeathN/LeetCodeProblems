#First Problem 1338
class Solution(object):
    def minSetSize(self, arr):
        freq = Counter(arr)
    
        frequencies = sorted(freq.values(), reverse=True)
        
        target = len(arr) // 2
        removed = 0
        count = 0
        
        for f in frequencies:
            removed += f
            count += 1
            if removed >= target:
                break
        
        return count



#Second Problem 1339
class Solution(object):
    def maxProduct(self, root):
        MOD = 10**9 + 7
        
        def calculate_total_sum(node):
            if not node:
                return 0
            return node.val + calculate_total_sum(node.left) + calculate_total_sum(node.right)
        
        total_sum = calculate_total_sum(root)
        
        def calculate_subtree_sum(node, max_product):
            if not node:
                return 0
            subtree_sum = node.val + calculate_subtree_sum(node.left, max_product) + calculate_subtree_sum(node.right, max_product)
            max_product[0] = max(max_product[0], subtree_sum * (total_sum - subtree_sum))
            return subtree_sum
        
        max_product = [0]  
        calculate_subtree_sum(root, max_product)
        
        return max_product[0] % MOD



#Third Problem 1341
WITH UserMovieCount AS (
    SELECT
        u.name AS user_name,
        COUNT(mr.movie_id) AS movie_count
    FROM
        Users u
        JOIN MovieRating mr ON u.user_id = mr.user_id
    GROUP BY
        u.user_id, u.name
),
MovieAvgRating AS (
    SELECT
        m.title AS movie_name,
        AVG(mr.rating) AS avg_rating
    FROM
        Movies m
        JOIN MovieRating mr ON m.movie_id = mr.movie_id
    WHERE
        mr.created_at BETWEEN '2020-02-01' AND '2020-02-29'
    GROUP BY
        m.movie_id, m.title
)
SELECT
    (
        SELECT
            user_name
        FROM
            UserMovieCount
        ORDER BY
            movie_count DESC,
            user_name ASC
        LIMIT 1
    ) AS results
UNION ALL
SELECT
    (
        SELECT
            movie_name
        FROM
            MovieAvgRating
        ORDER BY
            avg_rating DESC,
            movie_name ASC
        LIMIT 1
    ) AS results;




