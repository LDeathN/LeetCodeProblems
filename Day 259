#First Problem 1524
class Solution(object):
    def numOfSubarrays(self, arr):
        MOD = 10**9 + 7
        odd_count = 0
        even_count = 1
        current_sum = 0
        result = 0

        for num in arr:
            current_sum += num
            if current_sum % 2 == 0:
                result += odd_count
                even_count += 1
            else:
                result += even_count
                odd_count += 1
            
            result %= MOD 

        return result



#Second Problem 1525
class Solution(object):
    def numSplits(self, s):
        n = len(s)
        if n < 2:
            return 0

        suffix_distinct = [0] * n
        seen = set()
        for i in range(n - 1, -1, -1):
            seen.add(s[i])
            suffix_distinct[i] = len(seen)

        seen = set()
        result = 0
        for i in range(n - 1):
            seen.add(s[i])
            if len(seen) == suffix_distinct[i + 1]:
                result += 1

        return result



#Third Problem 1529
class Solution(object):
    def minFlips(self, target):
        operations = 0
        current = '0'
        
        for bit in target:
            if bit != current:
                operations += 1
                current = bit  
        
        return operations



#Fourth Problem 1530
class Solution(object):
    def countPairs(self, root, distance):
        def dfs(node):
            if not node:
                return [0] * (distance + 1)
            
            if not node.left and not node.right:  
                dist = [0] * (distance + 1)
                dist[1] = 1 
                return dist
            
            left_dist = dfs(node.left)
            right_dist = dfs(node.right)
            
            for l in range(1, distance + 1):
                for r in range(1, distance + 1):
                    if l + r <= distance:
                        good_pairs[0] += left_dist[l] * right_dist[r]
            
            current_dist = [0] * (distance + 1)
            for i in range(1, distance): 
                current_dist[i + 1] += left_dist[i]
                current_dist[i + 1] += right_dist[i]
            
            return current_dist
        
        good_pairs = [0]  
        dfs(root)
        return good_pairs[0]



#Fifth Problem 1535
class Solution(object):
    def getWinner(self, arr, k):
        champion = arr[0]
        win_count = 0
        
        for i in range(1, len(arr)):
            if arr[i] > champion:
                champion = arr[i]
                win_count = 1 
            else:
                win_count += 1  
            
            if win_count == k:
                return champion
        
        return champion


End of Day 259
