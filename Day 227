#First Problem (1049)
class Solution(object):
    def lastStoneWeightII(self, stones):
        total_sum = sum(stones)
        target = total_sum // 2
        dp = [False] * (target + 1)
        dp[0] = True  
        
        for stone in stones:
            for j in range(target, stone - 1, -1):
                dp[j] = dp[j] or dp[j - stone]
        
        for sum1 in range(target, -1, -1):
            if dp[sum1]:
                return total_sum - 2 * sum1



#Second Problem (1052)
class Solution(object):
    def maxSatisfied(self, customers, grumpy, minutes):
        n = len(customers)
    
        base_satisfaction = sum(customers[i] for i in range(n) if grumpy[i] == 0)
        
        max_gain = 0
        current_gain = 0
        
        for i in range(minutes):
            if grumpy[i] == 1:
                current_gain += customers[i]
        
        max_gain = current_gain
        
        for i in range(minutes, n):
            if grumpy[i] == 1:
                current_gain += customers[i]
            if grumpy[i - minutes] == 1:
                current_gain -= customers[i - minutes]
            max_gain = max(max_gain, current_gain)
        
        return base_satisfaction + max_gain




