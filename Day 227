#First Problem (1049)
class Solution(object):
    def lastStoneWeightII(self, stones):
        total_sum = sum(stones)
        target = total_sum // 2
        dp = [False] * (target + 1)
        dp[0] = True  
        
        for stone in stones:
            for j in range(target, stone - 1, -1):
                dp[j] = dp[j] or dp[j - stone]
        
        for sum1 in range(target, -1, -1):
            if dp[sum1]:
                return total_sum - 2 * sum1



#Second Problem (1052)
class Solution(object):
    def maxSatisfied(self, customers, grumpy, minutes):
        n = len(customers)
    
        base_satisfaction = sum(customers[i] for i in range(n) if grumpy[i] == 0)
        
        max_gain = 0
        current_gain = 0
        
        for i in range(minutes):
            if grumpy[i] == 1:
                current_gain += customers[i]
        
        max_gain = current_gain
        
        for i in range(minutes, n):
            if grumpy[i] == 1:
                current_gain += customers[i]
            if grumpy[i - minutes] == 1:
                current_gain -= customers[i - minutes]
            max_gain = max(max_gain, current_gain)
        
        return base_satisfaction + max_gain



#Third Problem (1053)
class Solution(object):
    def prevPermOpt1(self, arr):
        n = len(arr)
    
        for i in range(n - 2, -1, -1):
            if arr[i] > arr[i + 1]:
                break
        else:
            return arr
        
        max_index = -1
        for j in range(i + 1, n):
            if arr[j] < arr[i] and (max_index == -1 or arr[j] > arr[max_index]):
                max_index = j
        
        arr[i], arr[max_index] = arr[max_index], arr[i]
        
        return arr



#Fourth Problem (1054)
class Solution(object):
    def rearrangeBarcodes(self, barcodes):
        freq = Counter(barcodes)
    
        max_heap = [(-count, barcode) for barcode, count in freq.items()]
        heapq.heapify(max_heap)
        
        result = []
        prev_count, prev_barcode = 0, 0  
        
        while max_heap:
            count, barcode = heapq.heappop(max_heap)  
            result.append(barcode)  
            
            if prev_count < 0:
                heapq.heappush(max_heap, (prev_count, prev_barcode))
            
            prev_count, prev_barcode = count + 1, barcode  
        
        return result



#Fifth Problem (1061)
class UnionFind:
    def __init__(self):
        self.parent = {chr(i): chr(i) for i in range(ord('a'), ord('z') + 1)}
        self.rank = {chr(i): 0 for i in range(ord('a'), ord('z') + 1)}
    
    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])  
        return self.parent[x]
    
    def union(self, x, y):
        rootX = self.find(x)
        rootY = self.find(y)
        if rootX != rootY:
            if rootX < rootY:
                self.parent[rootY] = rootX
            else:
                self.parent[rootX] = rootY


class Solution(object):
    def smallestEquivalentString(self, s1, s2, baseStr):
        uf = UnionFind()
    
        for c1, c2 in zip(s1, s2):
            uf.union(c1, c2)
        
        result = []
        for c in baseStr:
            result.append(uf.find(c))
        
        return ''.join(result)


End of Day 227
