#First Problem (729)
class MyCalendar(object):

    def __init__(self):
        self.events = []

    def book(self, startTime, endTime):
        for s, e in self.events:
            if startTime < e and endTime > s:
                return False
        self.events.append((startTime, endTime))
        return True



#Second Problem (731)
class MyCalendarTwo(object):

    def __init__(self):
        self.booked = [] 
        self.overlaps = []

    def book(self, start, end):
        for o_start, o_end in self.overlaps:
            if start < o_end and end > o_start:
                return False

        for b_start, b_end in self.booked:
            if start < b_end and end > b_start:
                self.overlaps.append((max(start, b_start), min(end, b_end)))

        self.booked.append((start, end))
        return True



#Third Problem (735)
class Solution(object):
    def asteroidCollision(self, asteroids):
        stack = []
    
        for asteroid in asteroids:
            while stack and asteroid < 0 and stack[-1] > 0:
                if stack[-1] < abs(asteroid): 
                    stack.pop()
                    continue
                elif stack[-1] == abs(asteroid):  
                    stack.pop()
                break  
            else:
                stack.append(asteroid)
        
        return stack



#Fourth Problem (738)
class Solution(object):
    def monotoneIncreasingDigits(self, n):
        digits = list(map(int, str(n)))  
        length = len(digits)
      
        marker = length
        for i in range(length - 1, 0, -1):
            if digits[i - 1] > digits[i]:
                digits[i - 1] -= 1 
                marker = i  

        for i in range(marker, length):
            digits[i] = 9

        return int("".join(map(str, digits)))




