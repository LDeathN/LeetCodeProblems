#First Problem (513)
class Solution(object):
    from collections import deque
    def findBottomLeftValue(self, root):
        queue = deque([root])
    
        leftmost_value = root.val
        
        while queue:
            level_size = len(queue)

            for i in range(level_size):
                node = queue.popleft()

                if i == 0:
                    leftmost_value = node.val

                if node.left:
                    queue.append(node.left)

                if node.right:
                    queue.append(node.right)

        return leftmost_value



#Second Problem (515)
class Solution(object):
    from collections import deque
    def largestValues(self, root):
        if not root:
            return []

        queue = deque([root])
        result = []
        
        while queue:
            level_size = len(queue)
            max_value = float('-inf')

            for _ in range(level_size):
                node = queue.popleft()
                max_value = max(max_value, node.val)

                if node.left:
                    queue.append(node.left)

                if node.right:
                    queue.append(node.right)

            result.append(max_value)
        
        return result



#Third Problem (516)
class Solution(object):
    def longestPalindromeSubseq(self, s):
        n = len(s)
        dp = [[0] * n for _ in range(n)]

        for i in range(n):
            dp[i][i] = 1

        for length in range(2, n + 1): 
            for i in range(n - length + 1):
                j = i + length - 1
                if s[i] == s[j]:
                    dp[i][j] = dp[i + 1][j - 1] + 2
                else:
                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])

        return dp[0][n - 1]



#Fourth Problem (518)
class Solution(object):
    def change(self, amount, coins):
        dp = [0] * (amount + 1)
        dp[0] = 1

        for coin in coins:
            for i in range(coin, amount + 1):
                dp[i] += dp[i - coin]

        return dp[amount]



#Fifth Problem (519)
class Solution(object):
    import random
    def __init__(self, m, n):
        self.m = m
        self.n = n
        self.total = m * n
        self.flipped_map = {}
        self.available_positions = self.total
        

    def flip(self):
        rand_index = random.randint(0, self.available_positions - 1)
        flip_index = self.flipped_map.get(rand_index, rand_index)
        self.flipped_map[rand_index] = self.flipped_map.get(self.available_positions - 1, self.available_positions - 1)
        self.available_positions -= 1
        row, col = divmod(flip_index, self.n)
        return [row, col]
        

    def reset(self):
        self.available_positions = self.total
        self.flipped_map.clear()


End of Day 183
