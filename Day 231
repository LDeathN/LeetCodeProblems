#First Problem 1130
class Solution(object):
    def mctFromLeafValues(self, arr):
        stack = []
        total_sum = 0

        for value in arr:
            while stack and stack[-1] <= value:
                mid = stack.pop()
                if stack:
                    total_sum += mid * min(stack[-1], value)
                else:
                    total_sum += mid * value
            stack.append(value)

        while len(stack) > 1:
            total_sum += stack.pop() * stack[-1]

        return total_sum



#Second Problem 1131
class Solution(object):
    def maxAbsValExpr(self, arr1, arr2):
        n = len(arr1)
        max1 = max2 = max3 = max4 = float('-inf')
        min1 = min2 = min3 = min4 = float('inf')

        for i in range(n):
            F1 = arr1[i] + arr2[i] + i
            F2 = arr1[i] - arr2[i] + i
            F3 = -arr1[i] + arr2[i] + i
            F4 = -arr1[i] - arr2[i] + i

            max1, min1 = max(max1, F1), min(min1, F1)
            max2, min2 = max(max2, F2), min(min2, F2)
            max3, min3 = max(max3, F3), min(min3, F3)
            max4, min4 = max(max4, F4), min(min4, F4)

        return max(max1 - min1, max2 - min2, max3 - min3, max4 - min4)




