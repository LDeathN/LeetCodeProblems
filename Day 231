#First Problem 1130
class Solution(object):
    def mctFromLeafValues(self, arr):
        stack = []
        total_sum = 0

        for value in arr:
            while stack and stack[-1] <= value:
                mid = stack.pop()
                if stack:
                    total_sum += mid * min(stack[-1], value)
                else:
                    total_sum += mid * value
            stack.append(value)

        while len(stack) > 1:
            total_sum += stack.pop() * stack[-1]

        return total_sum



#Second Problem 1131
class Solution(object):
    def maxAbsValExpr(self, arr1, arr2):
        n = len(arr1)
        max1 = max2 = max3 = max4 = float('-inf')
        min1 = min2 = min3 = min4 = float('inf')

        for i in range(n):
            F1 = arr1[i] + arr2[i] + i
            F2 = arr1[i] - arr2[i] + i
            F3 = -arr1[i] + arr2[i] + i
            F4 = -arr1[i] - arr2[i] + i

            max1, min1 = max(max1, F1), min(min1, F1)
            max2, min2 = max(max2, F2), min(min2, F2)
            max3, min3 = max(max3, F3), min(min3, F3)
            max4, min4 = max(max4, F4), min(min4, F4)

        return max(max1 - min1, max2 - min2, max3 - min3, max4 - min4)



#Third Problem 1138
class Solution(object):
    def alphabetBoardPath(self, target):
        def get_position(char):
            index = ord(char) - ord('a')
            return index // 5, index % 5

        x, y = 0, 0
        result = []

        for char in target:
            nx, ny = get_position(char)
      
            if char == 'z' and x < nx:
                result.append('L' * (y - ny))
                result.append('D' * (nx - x))
            else:
                if nx < x:
                    result.append('U' * (x - nx))
                if nx > x:
                    result.append('D' * (nx - x))
                if ny < y:
                    result.append('L' * (y - ny))
                if ny > y:
                    result.append('R' * (ny - y))
            
            result.append('!')
            
            x, y = nx, ny

        return ''.join(result)



#Fourth Problem 1139
class Solution(object):
    def largest1BorderedSquare(self, grid):
        m, n = len(grid), len(grid[0])
        
        rowSum = [[0] * n for _ in range(m)]
        colSum = [[0] * n for _ in range(m)]
        
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 1:
                    rowSum[i][j] = rowSum[i][j - 1] + 1 if j > 0 else 1
                    colSum[i][j] = colSum[i - 1][j] + 1 if i > 0 else 1
        
        max_side = 0
        for i in range(m):
            for j in range(n):
                for side in range(min(m - i, n - j), 0, -1):
                    if rowSum[i][j + side - 1] >= side and \
                       rowSum[i + side - 1][j + side - 1] >= side and \
                       colSum[i + side - 1][j] >= side and \
                       colSum[i + side - 1][j + side - 1] >= side:
                        max_side = max(max_side, side)
                        break
        
        return max_side * max_side




