#First Problem (388)
class Solution(object):
    def lengthLongestPath(self, input):
        path_length = {0: 0}
        max_length = 0

        for line in input.split("\n"):
            depth = line.count("\t")
            name = line.lstrip("\t")

            if '.' in name:
                max_length = max(max_length, path_length[depth] + len(name))
            else:
                path_length[depth + 1] = path_length[depth] + len(name) + 1

        return max_length



#Second Problem (390)
class Solution(object):
    def lastRemaining(self, n):
        head = 1
        step = 1
        left = True
        remaining = n

        while remaining > 1:
            if left or remaining % 2 == 1:
                head += step
            step *= 2
            remaining //= 2
            left = not left

        return head



#Third Problem (393)
class Solution(object):
    def validUtf8(self, data):
        remaining_bytes = 0

        for byte in data:
            byte = byte & 0xFF

            if remaining_bytes == 0:
                if (byte >> 5) == 0b110:  
                    remaining_bytes = 1
                elif (byte >> 4) == 0b1110:  
                    remaining_bytes = 2
                elif (byte >> 3) == 0b11110:  
                    remaining_bytes = 3
                elif (byte >> 7):  
                    return False
            else:
                if (byte >> 6) != 0b10:
                    return False
                remaining_bytes -= 1

        return remaining_bytes == 0



#Fourth Problem (394)
class Solution(object):
    def decodeString(self, s):
        num_stack = []  
        str_stack = []  
        current_str = ""
        current_num = 0

        for char in s:
            if char.isdigit():
                current_num = current_num * 10 + int(char)
            elif char == '[':
                num_stack.append(current_num)
                str_stack.append(current_str)
                current_str = ""
                current_num = 0
            elif char == ']':
                repeat_count = num_stack.pop()
                previous_str = str_stack.pop()
                current_str = previous_str + current_str * repeat_count
            else:
                current_str += char

        return current_str



#Fifth Problem (395)
class Solution(object):
    def longestSubstring(self, s, k):
        if len(s) < k:
            return 0

        char_count = {}
        for char in s:
            char_count[char] = char_count.get(char, 0) + 1

        for char in char_count:
            if char_count[char] < k:
                return max(self.longestSubstring(sub, k) for sub in s.split(char))

        return len(s)


End of Day 172 
