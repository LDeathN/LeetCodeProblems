#First Problem (718)
class Solution(object):
    def findLength(self, nums1, nums2):
        dp = [[0] * (len(nums2) + 1) for _ in range(len(nums1) + 1)]
        max_length = 0  

        for i in range(1, len(nums1) + 1):
            for j in range(1, len(nums2) + 1):
                if nums1[i - 1] == nums2[j - 1]:
                    dp[i][j] = dp[i - 1][j - 1] + 1
                    max_length = max(max_length, dp[i][j])  

        return max_length



#Second Problem (720)
class Solution(object):
    def longestWord(self, words):
        words.sort(key=lambda x: (len(x), x))
    
        buildable = set([""])
        longest_word = ""
        
        for word in words:
            if word[:-1] in buildable:
                buildable.add(word)
                if len(word) > len(longest_word) or (len(word) == len(longest_word) and word < longest_word):
                    longest_word = word

        return longest_word



#Third Problem (721)
class UnionFind:
    def __init__(self):
        self.parent = {}
        
    def find(self, x):
        if x != self.parent.setdefault(x, x):
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]
    
    def union(self, x, y):
        self.parent[self.find(x)] = self.find(y)


class Solution(object):
    def accountsMerge(self, accounts):
        uf = UnionFind()
        email_to_name = {}
        
        for account in accounts:
            name = account[0]
            first_email = account[1]
            for email in account[1:]:
                uf.union(first_email, email)
                email_to_name[email] = name
        
        merged_accounts = defaultdict(list)
        for email in email_to_name:
            root_email = uf.find(email)
            merged_accounts[root_email].append(email)
        
        result = []
        for root_email, emails in merged_accounts.items():
            result.append([email_to_name[root_email]] + sorted(emails))
        
        return result




