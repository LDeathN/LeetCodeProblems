#First Problem 1314
class Solution(object):
    def matrixBlockSum(self, mat, k):
        m, n = len(mat), len(mat[0])
    
        prefix = [[0] * (n + 1) for _ in range(m + 1)]
        for i in range(m):
            for j in range(n):
                prefix[i + 1][j + 1] = mat[i][j] + prefix[i][j + 1] + prefix[i + 1][j] - prefix[i][j]

        answer = [[0] * n for _ in range(m)]
        for i in range(m):
            for j in range(n):
                r1, c1 = max(0, i - k), max(0, j - k)
                r2, c2 = min(m - 1, i + k), min(n - 1, j + k)
                
                answer[i][j] = (
                    prefix[r2 + 1][c2 + 1] -
                    prefix[r1][c2 + 1] -
                    prefix[r2 + 1][c1] +
                    prefix[r1][c1]
                )
        
        return answer



#Second Problem 1315
class Solution(object):
    def sumEvenGrandparent(self, root):
        def dfs(node, parent, grandparent):
            if not node:
                return 0
            
            grandparent_sum = node.val if grandparent and grandparent.val % 2 == 0 else 0
            
            grandparent_sum += dfs(node.left, node, parent)
            grandparent_sum += dfs(node.right, node, parent)
            
            return grandparent_sum
        
        return dfs(root, None, None)



#Third Problem 1318
class Solution(object):
    def minFlips(self, a, b, c):
        flips = 0
        while a > 0 or b > 0 or c > 0:
            bit_a = a & 1
            bit_b = b & 1
            bit_c = c & 1
            
            if bit_c == 1:
                if bit_a == 0 and bit_b == 0:
                    flips += 1  
            else: 
                flips += bit_a + bit_b  
            
            a >>= 1
            b >>= 1
            c >>= 1
        
        return flips




