#First Problem (593)
class Solution(object):
    def validSquare(self, p1, p2, p3, p4):
        def dist_sq(p, q):
            return (p[0] - q[0]) ** 2 + (p[1] - q[1]) ** 2

        distances = [
            dist_sq(p1, p2), dist_sq(p1, p3), dist_sq(p1, p4),
            dist_sq(p2, p3), dist_sq(p2, p4), dist_sq(p3, p4)
        ]

        unique_distances = set(distances)
        
        if len(unique_distances) != 2:
            return False

        side = min(unique_distances)
        diagonal = max(unique_distances)

        return distances.count(side) == 4 and distances.count(diagonal) == 2



#Second Problem (602)
WITH FriendsCount AS (
    SELECT requester_id AS id, COUNT(DISTINCT accepter_id) AS num
    FROM RequestAccepted
    GROUP BY requester_id
    UNION ALL
    SELECT accepter_id AS id, COUNT(DISTINCT requester_id) AS num
    FROM RequestAccepted
    GROUP BY accepter_id
),
TotalFriends AS (
    SELECT id, SUM(num) AS num
    FROM FriendsCount
    GROUP BY id
)

SELECT id, num
FROM TotalFriends
ORDER BY num DESC
LIMIT 1;



#Third Problem (606)
class Solution(object):
    def tree2str(self, root):
        if not root:
            return ""

        result = str(root.val)

        if root.left or root.right:  
            result += "(" + self.tree2str(root.left) + ")"

        if root.right:
            result += "(" + self.tree2str(root.right) + ")"
        
        return result




