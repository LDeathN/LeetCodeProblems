#First Problem 1143
class Solution(object):
    def longestCommonSubsequence(self, text1, text2):
        m, n = len(text1), len(text2)
        dp = [[0] * (n + 1) for _ in range(m + 1)]
        
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if text1[i - 1] == text2[j - 1]:
                    dp[i][j] = dp[i - 1][j - 1] + 1
                else:
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
        
        return dp[m][n]



#Second Problem 1144
class Solution(object):
    def movesToMakeZigzag(self, nums):
        n = len(nums)
        
        def calculate_moves(zigzag_even):
            moves = 0
            for i in range(n):
                left = nums[i - 1] if i > 0 else float('inf')
                right = nums[i + 1] if i < n - 1 else float('inf')
                
                if zigzag_even and i % 2 == 0:
                    moves += max(0, nums[i] - min(left, right) + 1)
                elif not zigzag_even and i % 2 == 1:
                    moves += max(0, nums[i] - min(left, right) + 1)
            
            return moves
        
        return min(calculate_moves(True), calculate_moves(False))




