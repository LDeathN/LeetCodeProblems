#First Problem 1143
class Solution(object):
    def longestCommonSubsequence(self, text1, text2):
        m, n = len(text1), len(text2)
        dp = [[0] * (n + 1) for _ in range(m + 1)]
        
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if text1[i - 1] == text2[j - 1]:
                    dp[i][j] = dp[i - 1][j - 1] + 1
                else:
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
        
        return dp[m][n]



#Second Problem 1144
class Solution(object):
    def movesToMakeZigzag(self, nums):
        n = len(nums)
        
        def calculate_moves(zigzag_even):
            moves = 0
            for i in range(n):
                left = nums[i - 1] if i > 0 else float('inf')
                right = nums[i + 1] if i < n - 1 else float('inf')
                
                if zigzag_even and i % 2 == 0:
                    moves += max(0, nums[i] - min(left, right) + 1)
                elif not zigzag_even and i % 2 == 1:
                    moves += max(0, nums[i] - min(left, right) + 1)
            
            return moves
        
        return min(calculate_moves(True), calculate_moves(False))



#Third Problem 1145
class Solution(object):
    def btreeGameWinningMove(self, root, n, x):
        def count_nodes(node):
            if not node:
                return 0
            return 1 + count_nodes(node.left) + count_nodes(node.right)
        
        def find_node(node, val):
            if not node or node.val == val:
                return node
            return find_node(node.left, val) or find_node(node.right, val)
        
        x_node = find_node(root, x)
        left = count_nodes(x_node.left)
        right = count_nodes(x_node.right)
        parent = n - (left + right + 1)  
        
        return max(left, right, parent) > n // 2



#Fourth Problem 1146
class SnapshotArray(object):

    def __init__(self, length):
        self.snapshots = [collections.defaultdict(int) for _ in range(length)]
        self.snap_id = 0
        

    def set(self, index, val):
        self.snapshots[index][self.snap_id] = val
        

    def snap(self):
        self.snap_id += 1
        return self.snap_id - 1
        

    def get(self, index, snap_id):
        snaps = self.snapshots[index]
        if snap_id in snaps:
            return snaps[snap_id]
        keys = sorted(snaps.keys())
        idx = self.binary_search(keys, snap_id)
        return snaps[keys[idx]] if idx != -1 else 0
    
    def binary_search(self, keys, target):
        low, high = 0, len(keys) - 1
        best = -1
        while low <= high:
            mid = (low + high) // 2
            if keys[mid] <= target:
                best = mid
                low = mid + 1
            else:
                high = mid - 1
        return best



#Fifth Problem 1155
class Solution(object):
    def numRollsToTarget(self, n, k, target):
        MOD = 10**9 + 7

        dp = [[0] * (target + 1) for _ in range(n + 1)]
        dp[0][0] = 1  

        for i in range(1, n + 1):  
            for j in range(1, target + 1):  
                for f in range(1, k + 1):  
                    if j - f >= 0: 
                        dp[i][j] = (dp[i][j] + dp[i-1][j-f]) % MOD

        return dp[n][target]


End of Day 232
