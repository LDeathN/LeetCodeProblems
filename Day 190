#First Problem (621)
class Solution(object):
    def leastInterval(self, tasks, n):
        task_counts = Counter(tasks)         
        max_freq = max(task_counts.values()) 
        max_freq_count = list(task_counts.values()).count(max_freq)  

        intervals = (max_freq - 1) * (n + 1) + max_freq_count

        return max(intervals, len(tasks))



#Second Problem (622)
class MyCircularQueue(object):

    def __init__(self, k):
        self.queue = [0] * k        
        self.size = k          
        self.front = 0               
        self.rear = -1           
        self.count = 0 
        

    def enQueue(self, value):
        if self.isFull():
            return False
        self.rear = (self.rear + 1) % self.size
        self.queue[self.rear] = value
        self.count += 1
        return True
        

    def deQueue(self):
        if self.isEmpty():
            return False
        self.front = (self.front + 1) % self.size
        self.count -= 1
        return True
        

    def Front(self):
        if self.isEmpty():
            return -1
        return self.queue[self.front]
        

    def Rear(self):
        if self.isEmpty():
            return -1
        return self.queue[self.rear]
        

    def isEmpty(self):
        return self.count == 0
        

    def isFull(self):
        return self.count == self.size



#Third Problem (623)
class Solution(object):
    def addOneRow(self, root, val, depth):
        if depth == 1:
            newRoot = TreeNode(val)
            newRoot.left = root
            return newRoot
        
        queue = [root]
        current_depth = 1

        while queue and current_depth < depth - 1:
            current_depth += 1
            next_level = []
            for node in queue:
                if node.left:
                    next_level.append(node.left)
                if node.right:
                    next_level.append(node.right)
            queue = next_level
        
        for node in queue:
            temp_left = node.left
            temp_right = node.right
            node.left = TreeNode(val)
            node.right = TreeNode(val)
            node.left.left = temp_left
            node.right.right = temp_right
        
        return root



#Fourth Problem (624)
class Solution(object):
    def maxDistance(self, arrays):
        min_val = arrays[0][0]
        max_val = arrays[0][-1]
        max_distance = 0

        for i in range(1, len(arrays)):
            current_min = arrays[i][0]
            current_max = arrays[i][-1]

            max_distance = max(max_distance, abs(current_max - min_val), abs(max_val - current_min))

            min_val = min(min_val, current_min)
            max_val = max(max_val, current_max)
        
        return max_distance




