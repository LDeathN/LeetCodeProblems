#First Problem (621)
class Solution(object):
    def leastInterval(self, tasks, n):
        task_counts = Counter(tasks)         
        max_freq = max(task_counts.values()) 
        max_freq_count = list(task_counts.values()).count(max_freq)  

        intervals = (max_freq - 1) * (n + 1) + max_freq_count

        return max(intervals, len(tasks))



#Second Problem (622)
class MyCircularQueue(object):

    def __init__(self, k):
        self.queue = [0] * k        
        self.size = k          
        self.front = 0               
        self.rear = -1           
        self.count = 0 
        

    def enQueue(self, value):
        if self.isFull():
            return False
        self.rear = (self.rear + 1) % self.size
        self.queue[self.rear] = value
        self.count += 1
        return True
        

    def deQueue(self):
        if self.isEmpty():
            return False
        self.front = (self.front + 1) % self.size
        self.count -= 1
        return True
        

    def Front(self):
        if self.isEmpty():
            return -1
        return self.queue[self.front]
        

    def Rear(self):
        if self.isEmpty():
            return -1
        return self.queue[self.rear]
        

    def isEmpty(self):
        return self.count == 0
        

    def isFull(self):
        return self.count == self.size




