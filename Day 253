#First Problem 1443
class Solution(object):
    def minTime(self, n, edges, hasApple):
        graph = defaultdict(list)
        for a, b in edges:
            graph[a].append(b)
            graph[b].append(a)

        def dfs(node, parent):
            time = 0
            for child in graph[node]:
                if child != parent:  
                    child_time = dfs(child, node)
                    if child_time > 0 or hasApple[child]:
                        time += child_time + 2
            return time

        return dfs(0, -1)



#Second Problem 1447
class Solution(object):
    def simplifiedFractions(self, n):
        def gcd(a, b):
            while b != 0:
                a, b = b, a % b
            return a
        result = []
        for denominator in range(2, n + 1):  
            for numerator in range(1, denominator):  
                if gcd(numerator, denominator) == 1:  
                    result.append(str(numerator) + "/" + str(denominator)) 
        return result




