#First Problem 1110
class Solution(object):
    def delNodes(self, root, to_delete):
        to_delete_set = set(to_delete)  
        forest = []

        def dfs(node, is_root):
            if not node:
                return None
            
            root_deleted = node.val in to_delete_set
            if is_root and not root_deleted:
                forest.append(node)
            
            node.left = dfs(node.left, root_deleted)
            node.right = dfs(node.right, root_deleted)
            
            return None if root_deleted else node

        dfs(root, True)
        return forest



#Second Problem 1111
class Solution(object):
    def maxDepthAfterSplit(self, seq):
        result = []
        depth = 0  

        for char in seq:
            if char == '(':
                result.append(depth % 2)
                depth += 1
            else: 
                depth -= 1
                result.append(depth % 2)
        
        return result



#Third Problem 1123
class Solution(object):
    def lcaDeepestLeaves(self, root):
        def dfs(node):
            if not node:
                return 0, None  
            
            left_depth, left_lca = dfs(node.left)
            right_depth, right_lca = dfs(node.right)
            
            if left_depth == right_depth:
                return left_depth + 1, node
            
            if left_depth > right_depth:
                return left_depth + 1, left_lca
            
            return right_depth + 1, right_lca
        
        _, lca = dfs(root)
        return lca



#Fourth Problem 1124
class Solution(object):
    def longestWPI(self, hours):
        score = [1 if h > 8 else -1 for h in hours]
        
        prefix_sum = 0
        first_occurrence = {}
        max_length = 0

        for i, s in enumerate(score):
            prefix_sum += s

            if prefix_sum > 0:
                max_length = i + 1
            
            elif prefix_sum - 1 in first_occurrence:
                max_length = max(max_length, i - first_occurrence[prefix_sum - 1])
            
            if prefix_sum not in first_occurrence:
                first_occurrence[prefix_sum] = i

        return max_length




