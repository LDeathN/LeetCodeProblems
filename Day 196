#First Problem (688)
class Solution(object):
    def knightProbability(self, n, k, row, column):
        moves = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)]

        dp = [[[0.0] * n for _ in range(n)] for _ in range(k + 1)]
        dp[0][row][column] = 1.0  
        
        for move in range(k):
            for i in range(n):
                for j in range(n):
                    if dp[move][i][j] > 0:
                        for di, dj in moves:
                            ni, nj = i + di, j + dj
                            if 0 <= ni < n and 0 <= nj < n:
                                dp[move + 1][ni][nj] += dp[move][i][j] / 8.0
        
        result = sum(dp[k][i][j] for i in range(n) for j in range(n))
        return result




