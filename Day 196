#First Problem (688)
class Solution(object):
    def knightProbability(self, n, k, row, column):
        moves = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)]

        dp = [[[0.0] * n for _ in range(n)] for _ in range(k + 1)]
        dp[0][row][column] = 1.0  
        
        for move in range(k):
            for i in range(n):
                for j in range(n):
                    if dp[move][i][j] > 0:
                        for di, dj in moves:
                            ni, nj = i + di, j + dj
                            if 0 <= ni < n and 0 <= nj < n:
                                dp[move + 1][ni][nj] += dp[move][i][j] / 8.0
        
        result = sum(dp[k][i][j] for i in range(n) for j in range(n))
        return result



#Second Problem (690)
class Solution(object):
    def getImportance(self, employees, id):
        employee_map = {emp.id: emp for emp in employees}
        
        total_importance = 0
        queue = [id]
        
        while queue:
            current_id = queue.pop(0)
            employee = employee_map[current_id]
            total_importance += employee.importance  
            queue.extend(employee.subordinates)     
        
        return total_importance



#Third Problem (692)
class Solution(object):
    def topKFrequent(self, words, k):
        word_count = Counter(words)
        
        sorted_words = sorted(word_count.keys(), key=lambda word: (-word_count[word], word))
        
        return sorted_words[:k]



#Fourth Problem (695)
class Solution(object):
    def maxAreaOfIsland(self, grid):
        m, n = len(grid), len(grid[0])

        def dfs(x, y):
            if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == 0:
                return 0
            grid[x][y] = 0
            area = 1
            area += dfs(x + 1, y)
            area += dfs(x - 1, y)
            area += dfs(x, y + 1)
            area += dfs(x, y - 1)
            return area

        max_area = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 1:
                    max_area = max(max_area, dfs(i, j))

        return max_area



#Fifth Problem (698)
class Solution(object):
    def canPartitionKSubsets(self, nums, k):
        total_sum = sum(nums)
        if total_sum % k != 0:
            return False

        target = total_sum // k
        nums.sort(reverse=True)  

        subsets = [0] * k

        def dfs(index):
            if index == len(nums):
                return all(s == target for s in subsets)
            
            for i in range(k):
                if subsets[i] + nums[index] <= target:
                    subsets[i] += nums[index]
                    if dfs(index + 1):
                        return True
                    subsets[i] -= nums[index]
                if subsets[i] == 0:
                    break
            return False

        return dfs(0)


End of Day 196
