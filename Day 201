#First Problem (763)
class Solution(object):
    def partitionLabels(self, s):
        last_occurrence = {char: idx for idx, char in enumerate(s)}
    
        partitions = []
        start = 0
        end = 0

        for i, char in enumerate(s):
            end = max(end, last_occurrence[char]) 
            if i == end: 
                partitions.append(end - start + 1) 
                start = i + 1 
        
        return partitions



#Second Problem (764)
class Solution(object):
    def orderOfLargestPlusSign(self, n, mines):
        grid = [[n] * n for _ in range(n)]
    
        for x, y in mines:
            grid[x][y] = 0
        
        for i in range(n):
            count = 0
            for j in range(n):
                count = count + 1 if grid[i][j] != 0 else 0
                grid[i][j] = min(grid[i][j], count)
            
            count = 0
            for j in range(n - 1, -1, -1):
                count = count + 1 if grid[i][j] != 0 else 0
                grid[i][j] = min(grid[i][j], count)
        
        for j in range(n):
            count = 0
            for i in range(n):
                count = count + 1 if grid[i][j] != 0 else 0
                grid[i][j] = min(grid[i][j], count)
            
            count = 0
            for i in range(n - 1, -1, -1):
                count = count + 1 if grid[i][j] != 0 else 0
                grid[i][j] = min(grid[i][j], count)
        
        max_order = 0
        for i in range(n):
            for j in range(n):
                max_order = max(max_order, grid[i][j])
        
        return max_order



#Third Problem (767)
class Solution(object):
    def reorganizeString(self, s):
        freq = Counter(s)
    
        max_freq = max(freq.values())
        if max_freq > (len(s) + 1) // 2:
            return ""
        
        max_heap = [(-count, char) for char, count in freq.items()]
        heapq.heapify(max_heap)
        
        result = []
        prev_count, prev_char = 0, ""
        
        while max_heap:
            count, char = heapq.heappop(max_heap)
            result.append(char)
            
            if prev_count < 0:
                heapq.heappush(max_heap, (prev_count, prev_char))
            
            prev_count = count + 1  
            prev_char = char
        
        return "".join(result)



#Fourth Problem (769)
class Solution(object):
    def maxChunksToSorted(self, arr):
        max_so_far = 0
        count = 0
        
        for i in range(len(arr)):
            max_so_far = max(max_so_far, arr[i])
            
            if max_so_far == i:
                count += 1
        
        return count



#Fifth Problem (775)
class Solution(object):
    def isIdealPermutation(self, nums):
        for i in range(len(nums)):
            if abs(nums[i] - i) > 1:
                return False
        return True


End of Day 201
