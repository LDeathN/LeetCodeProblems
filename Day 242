#First Problem 1302
class Solution(object):
    def deepestLeavesSum(self, root):
        def dfs(node, depth, max_depth, deepest_sum):
            if not node:
                return max_depth, deepest_sum
            if depth > max_depth:
                max_depth = depth
                deepest_sum = node.val
            elif depth == max_depth:
                deepest_sum += node.val
            max_depth, deepest_sum = dfs(node.left, depth + 1, max_depth, deepest_sum)
            max_depth, deepest_sum = dfs(node.right, depth + 1, max_depth, deepest_sum)
            return max_depth, deepest_sum

        _, deepest_sum = dfs(root, 0, -1, 0)
        return deepest_sum



#Second Problem 1305
class Solution(object):
    def getAllElements(self, root1, root2):
        def in_order_traversal(node, result):
            if node:
                in_order_traversal(node.left, result)
                result.append(node.val)
                in_order_traversal(node.right, result)
        
        list1, list2 = [], []
        in_order_traversal(root1, list1)
        in_order_traversal(root2, list2)
        
        merged_list = []
        i, j = 0, 0
        while i < len(list1) and j < len(list2):
            if list1[i] < list2[j]:
                merged_list.append(list1[i])
                i += 1
            else:
                merged_list.append(list2[j])
                j += 1
        
        merged_list.extend(list1[i:])
        merged_list.extend(list2[j:])
        
        return merged_list




