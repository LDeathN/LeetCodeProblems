#First Problem (669)
class Solution(object):
    def trimBST(self, root, low, high):
        if not root:
            return None

        if root.val < low:
            return self.trimBST(root.right, low, high)

        if root.val > high:
            return self.trimBST(root.left, low, high)

        root.left = self.trimBST(root.left, low, high)
        root.right = self.trimBST(root.right, low, high)
        
        return root



#Second Problem (670)
class Solution(object):
    def maximumSwap(self, num):
        digits = list(str(num))
        last = {int(x): i for i, x in enumerate(digits)}

        for i, digit in enumerate(digits):
            for d in range(9, int(digit), -1):
                if last.get(d, -1) > i:
                    digits[i], digits[last[d]] = digits[last[d]], digits[i]
                    return int("".join(digits))

        return num



#Third Problem (672)
class Solution(object):
    def flipLights(self, n, presses):
        if n > 3:
            n = 3
        
        if presses == 0:
            return 1
        elif presses == 1:
            return [2, 3, 4][n - 1]
        elif presses == 2:
            return [2, 4, 7][n - 1]
        else:
            return [2, 4, 8][n - 1]



#Fourth Problem (673)
class Solution(object):
    def findNumberOfLIS(self, nums):
        n = len(nums)
        if n <= 1:
            return n

        length = [1] * n
        count = [1] * n
        
        for i in range(n):
            for j in range(i):
                if nums[i] > nums[j]: 
                    if length[j] + 1 > length[i]:
                        length[i] = length[j] + 1
                        count[i] = count[j]
                    elif length[j] + 1 == length[i]:
                        count[i] += count[j]
        
        max_len = max(length)
        return sum(count[i] for i in range(n) if length[i] == max_len)



#Fifth Problem (676)
class MagicDictionary(object):

    def __init__(self):
        self.patterns = defaultdict(list)
        

    def buildDict(self, dictionary):
        for word in dictionary:
            for i in range(len(word)):
                pattern = word[:i] + '*' + word[i+1:]
                self.patterns[pattern].append(word)
        

    def search(self, searchWord):
        for i in range(len(searchWord)):
            pattern = searchWord[:i] + '*' + searchWord[i+1:]
            if pattern in self.patterns:
                for word in self.patterns[pattern]:
                    if word != searchWord:
                        return True
        return False


End of Day 194
