#First Problem 1432
class Solution(object):
    def maxDiff(self, num):
        num_str = str(num)

        for digit in num_str:
            if digit != '9':
                a = int(num_str.replace(digit, '9'))
                break
        else:
            a = num

        if num_str[0] != '1':
            b = int(num_str.replace(num_str[0], '1'))
        else:
            for digit in num_str[1:]:
                if digit != '0' and digit != '1':
                    b = int(num_str.replace(digit, '0'))
                    break
            else:
                b = num

        return a - b



#Second Problem 1433
class Solution(object):
    def checkIfCanBreak(self, s1, s2):
        s1_sorted = sorted(s1)
        s2_sorted = sorted(s2)
        
        can_s1_break_s2 = all(c1 >= c2 for c1, c2 in zip(s1_sorted, s2_sorted))
        
        can_s2_break_s1 = all(c2 >= c1 for c1, c2 in zip(s1_sorted, s2_sorted))
        
        return can_s1_break_s2 or can_s2_break_s1



#Third Problem 1438
class Solution(object):
    def longestSubarray(self, nums, limit):
        min_deque = deque() 
        max_deque = deque()  
        left = 0
        max_length = 0

        for right in range(len(nums)):
            while min_deque and nums[min_deque[-1]] > nums[right]:
                min_deque.pop()
            min_deque.append(right)
            
            while max_deque and nums[max_deque[-1]] < nums[right]:
                max_deque.pop()
            max_deque.append(right)
            
            while nums[max_deque[0]] - nums[min_deque[0]] > limit:
                left += 1
                if min_deque[0] < left:
                    min_deque.popleft()
                if max_deque[0] < left:
                    max_deque.popleft()
            
            max_length = max(max_length, right - left + 1)
        
        return max_length



#Fourth Problem 1441
class Solution(object):
    def buildArray(self, target, n):
        operations = []
        target_index = 0

        for i in range(1, n + 1):
            if target_index == len(target):
                break 
            
            if i == target[target_index]:
                operations.append("Push")
                target_index += 1  
            else:
                operations.append("Push")
                operations.append("Pop")  

        return operations



#Fifth Problem 1442
class Solution(object):
    def countTriplets(self, arr):
        prefixXor = 0
        count = 0
        freq = {0: 1} 
        sum_indices = {0: 0}  
        
        for k, value in enumerate(arr):
            prefixXor ^= value 
            
            if prefixXor in freq:
                count += freq[prefixXor] * k - sum_indices[prefixXor]
            
            freq[prefixXor] = freq.get(prefixXor, 0) + 1
            sum_indices[prefixXor] = sum_indices.get(prefixXor, 0) + k + 1
        
        return count


End of Day 252
