#First Problem 1191
class Solution(object):
    def kConcatenationMaxSum(self, arr, k):
        MOD = 10**9 + 7
    
        def kadane(array):
            max_sum = 0
            current_sum = 0
            for num in array:
                current_sum = max(num, current_sum + num)
                max_sum = max(max_sum, current_sum)
            return max_sum
        
        total_sum = sum(arr)
        
        kadane_single = kadane(arr)
        
        if k == 1:
            return kadane_single % MOD
        
        kadane_double = kadane(arr * 2)
        
        if total_sum > 0:
            return (kadane_double + (k - 2) * total_sum) % MOD
        else:
            return kadane_double % MOD



#Second Problem 1193
SELECT 
    DATE_FORMAT(trans_date, '%Y-%m') AS month,
    country,
    COUNT(*) AS trans_count,
    SUM(state = 'approved') AS approved_count,
    SUM(amount) AS trans_total_amount,
    SUM(CASE WHEN state = 'approved' THEN amount ELSE 0 END) AS approved_total_amount
FROM 
    Transactions
GROUP BY 
    DATE_FORMAT(trans_date, '%Y-%m'), country;



#Third Problem 1201
class Solution(object):
    def manual_gcd(self, x, y):
        while y:
            x, y = y, x % y
        return x

    def lcm(self, x, y):
        return x * y // self.manual_gcd(x, y)


    def nthUglyNumber(self, n, a, b, c):
        def count(x):
            ab = self.lcm(a, b)
            bc = self.lcm(b, c)
            ac = self.lcm(a, c)
            abc = self.lcm(ab, c)
            return (x // a) + (x // b) + (x // c) - (x // ab) - (x // bc) - (x // ac) + (x // abc)
        
        left, right = 1, 2 * 10**9
        while left < right:
            mid = (left + right) // 2
            if count(mid) < n:
                left = mid + 1
            else:
                right = mid
        return left



#Fourth Problem 1202
class UnionFind:
    def __init__(self, size):
        self.parent = list(range(size))
        self.rank = [1] * size

    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])  # Path compression
        return self.parent[x]

    def union(self, x, y):
        rootX = self.find(x)
        rootY = self.find(y)
        if rootX != rootY:
            if self.rank[rootX] > self.rank[rootY]:
                self.parent[rootY] = rootX
            elif self.rank[rootX] < self.rank[rootY]:
                self.parent[rootX] = rootY
            else:
                self.parent[rootY] = rootX
                self.rank[rootX] += 1


class Solution(object):
    
    def smallestStringWithSwaps(self, s, pairs):
        n = len(s)
        uf = UnionFind(n)

        for a, b in pairs:
            uf.union(a, b)

        components = defaultdict(list)
        for i in range(n):
            root = uf.find(i)
            components[root].append(i)

        result = list(s)

        for indices in components.values():
            chars = sorted(result[i] for i in indices)
            for i, char in zip(sorted(indices), chars):
                result[i] = char

        return ''.join(result)



#Fifth Problem 1204
WITH CumulativeWeight AS (
    SELECT 
        person_name,
        weight,
        turn,
        SUM(weight) OVER (ORDER BY turn) AS total_weight
    FROM Queue
)
SELECT person_name
FROM CumulativeWeight
WHERE total_weight <= 1000
ORDER BY turn DESC
LIMIT 1;


End of Day 235
