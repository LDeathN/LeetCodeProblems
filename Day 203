#First Problem (788)
class Solution(object):
    def rotatedDigits(self, n):
        rotate_map = {'0': '0', '1': '1', '2': '5', '5': '2', '6': '9', '8': '8', '9': '6'}
        count_good_numbers = 0
        
        for num in range(1, n + 1):
            num_str = str(num)
            rotated = []
            valid = True
            for digit in num_str:
                if digit not in rotate_map:
                    valid = False
                    break
                rotated.append(rotate_map[digit])
            
            if valid:
                rotated_num = ''.join(rotated)
                if rotated_num != num_str:  
                    count_good_numbers += 1
        
        return count_good_numbers



#Second Problem (789)
class Solution(object):
    def escapeGhosts(self, ghosts, target):
        my_distance = abs(target[0]) + abs(target[1])
    
        for ghost in ghosts:
            ghost_distance = abs(ghost[0] - target[0]) + abs(ghost[1] - target[1])
            if ghost_distance <= my_distance:
                return False
        
        return True



#Third Problem (790)
class Solution(object):
    def numTilings(self, n):
        MOD = 10**9 + 7

        if n == 0:
            return 1
        elif n == 1:
            return 1
        elif n == 2:
            return 2
        elif n == 3:
            return 5

        dp = [0] * (n + 1)
        dp[0] = 1
        dp[1] = 1
        dp[2] = 2
        dp[3] = 5
        
        for i in range(4, n + 1):
            dp[i] = (dp[i-1] + dp[i-2] + dp[i-3]) % MOD
        
        return dp[n]



#Fourth Problem (791)
class Solution(object):
    def customSortString(self, order, s):
        order_map = {char: i for i, char in enumerate(order)}
    
        s_ordered = sorted(s, key=lambda x: order_map[x] if x in order_map else float('inf'))
        
        return ''.join(s_ordered)



#Fifth Problem (792)
class Solution(object):
    def numMatchingSubseq(self, s, words):
        char_positions = defaultdict(list)
    
        for i, char in enumerate(s):
            char_positions[char].append(i)
        
        def isSubsequence(word):
            last_pos = -1
            
            for char in word:
                if char not in char_positions:
                    return False
                
                positions = char_positions[char]

                idx = bisect_right(positions, last_pos)
                
                if idx == len(positions):  
                    return False
                
                last_pos = positions[idx]
            
            return True
        
        count = 0
        for word in words:
            if isSubsequence(word):
                count += 1
        
        return count


End of Day 203
