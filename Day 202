#First Problem (777)
class Solution(object):
    def canTransform(self, start, result):
        if start.replace("X", "") != result.replace("X", ""):
            return False

        j = 0  
        for i, c in enumerate(start):
            if c == "X":
                continue
            while result[j] == "X":
                j += 1
            if c != result[j]:
                return False
            if c == "L" and i < j:
                return False  
            if c == "R" and i > j:
                return False 
            j += 1

        return True



#Second Problem (779)
class Solution(object):
    def kthGrammar(self, n, k):
        if n == 1:
            return 0
        
        mid = 2 ** (n - 2)
        
        if k <= mid:
            return self.kthGrammar(n - 1, k)
        else:
            return 1 - self.kthGrammar(n - 1, k - mid)



#Third Problem (784)
class Solution(object):
    def letterCasePermutation(self, s):
        results = []
    
        def backtrack(index, path):
            if index == len(s):
                results.append("".join(path))
                return
            
            if s[index].isalpha():
                path.append(s[index].lower())
                backtrack(index + 1, path)
                path.pop()
                
                path.append(s[index].upper())
                backtrack(index + 1, path)
                path.pop()
            else:
                path.append(s[index])
                backtrack(index + 1, path)
                path.pop()
        
        backtrack(0, [])
        return results



#Fourth Problem (785)
class Solution(object):
    def isBipartite(self, graph):
        n = len(graph)
        color = [-1] * n 

        for start in range(n):
            if color[start] == -1:
                queue = deque([start])
                color[start] = 0 

                while queue:
                    node = queue.popleft()
                    for neighbor in graph[node]:
                        if color[neighbor] == -1:
                            color[neighbor] = 1 - color[node]
                            queue.append(neighbor)
                        elif color[neighbor] == color[node]:

                            return False

        return True



#Fifth Problem (787)
class Solution(object):
    def findCheapestPrice(self, n, flights, src, dst, k):
        graph = collections.defaultdict(list)
        for u, v, price in flights:
            graph[u].append((v, price))
        
        queue = [(0, src, 0)]
        visited = {}
        
        while queue:
            cost, city, stops = heapq.heappop(queue)
            
            if city == dst:
                return cost
            
            if city in visited and visited[city] <= stops:
                continue
            visited[city] = stops
            
            if stops <= k:
                for neighbor, price in graph[city]:
                    new_cost = cost + price
                    heapq.heappush(queue, (new_cost, neighbor, stops + 1))
        
        return -1

End of Day 202
