#First Problem 1171
class Solution(object):
    def removeZeroSumSublists(self, head):
        dummy = ListNode(0)
        dummy.next = head
        
        prefix_sum_map = {}
        prefix_sum = 0
        current = dummy
        
        while current:
            prefix_sum += current.val
            prefix_sum_map[prefix_sum] = current
            current = current.next
        
        prefix_sum = 0
        current = dummy
        
        while current:
            prefix_sum += current.val
            current.next = prefix_sum_map[prefix_sum].next
            current = current.next
        
        return dummy.next



#Second Problem 1174
WITH FirstOrders AS (
    SELECT
        customer_id,
        MIN(order_date) AS first_order_date
    FROM
        Delivery
    GROUP BY
        customer_id
),
FirstOrderDetails AS (
    SELECT
        f.customer_id,
        d.order_date,
        d.customer_pref_delivery_date
    FROM
        FirstOrders f
    JOIN
        Delivery d
    ON
        f.customer_id = d.customer_id AND f.first_order_date = d.order_date
)
SELECT
    ROUND(SUM(CASE WHEN order_date = customer_pref_delivery_date THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS immediate_percentage
FROM
    FirstOrderDetails;



#Third Problem 1177
class Solution(object):
    def canMakePaliQueries(self, s, queries):
        n = len(s)
        prefix = [[0] * 26 for _ in range(n + 1)]  
        
        for i in range(n):
            for j in range(26):
                prefix[i + 1][j] = prefix[i][j]  
            prefix[i + 1][ord(s[i]) - ord('a')] += 1 
        
        result = []
        for left, right, k in queries:
            odd_count = 0
            for j in range(26):
                freq = prefix[right + 1][j] - prefix[left][j]
                if freq % 2 != 0:
                    odd_count += 1
            
            if odd_count // 2 <= k:
                result.append(True)
            else:
                result.append(False)
        
        return result



#Fourth Problem 1186
class Solution(object):
    def maximumSum(self, arr):
        n = len(arr)
    
        dp_no_del = arr[0]
        dp_one_del = float('-inf')  
        max_sum = arr[0]
        
        for i in range(1, n):
            new_dp_no_del = max(dp_no_del + arr[i], arr[i])
            new_dp_one_del = max(dp_no_del, dp_one_del + arr[i])
            
            dp_no_del = new_dp_no_del
            dp_one_del = new_dp_one_del
            
            max_sum = max(max_sum, dp_no_del, dp_one_del)
        
        return max_sum



#Fifth Problem 1190
class Solution(object):
    def reverseParentheses(self, s):
        stack = []
    
        for char in s:
            if char == ')':
                temp = []
                while stack and stack[-1] != '(':
                    temp.append(stack.pop())
                stack.pop()
                stack.extend(temp)
            else:
                stack.append(char)
        
        return ''.join(stack)


End of Day 234
