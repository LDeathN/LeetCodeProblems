#First Problem 1536
class Solution(object):
    def minSwaps(self, grid):
        n = len(grid)
    
        trailing_zeros = []
        for row in grid:
            count = 0
            for val in reversed(row):
                if val == 0:
                    count += 1
                else:
                    break
            trailing_zeros.append(count)
        
        swaps = 0
        
        for i in range(n):
            target = n - i - 1
            j = i
            while j < n and trailing_zeros[j] < target:
                j += 1
            
            if j == n:
                return -1
            
            while j > i:
                trailing_zeros[j], trailing_zeros[j-1] = trailing_zeros[j-1], trailing_zeros[j]
                j -= 1
                swaps += 1
        
        return swaps



#Second Problem 1540
class Solution(object):
    def canConvertString(self, s, t, k):
        if len(s) != len(t):
            return False
        
        shift_count = [0] * 26
        
        for char_s, char_t in zip(s, t):
            shift = (ord(char_t) - ord(char_s) + 26) % 26
            if shift > 0:  
                shift_count[shift] += 1
        
        for shift in range(1, 26):  
            max_moves_needed = (shift_count[shift] - 1) * 26 + shift
            if max_moves_needed > k:
                return False
        
        return True



#Third Problem 1541
class Solution(object):
    def minInsertions(self, s):
        balance = 0  
        insertions = 0  

        i = 0
        n = len(s)

        while i < n:
            if s[i] == '(':
                balance += 1
            else:
                if i + 1 < n and s[i + 1] == ')':
                    i += 1  
                else:
                    insertions += 1  

                if balance > 0:
                    balance -= 1  
                else:
                    insertions += 1  

            i += 1

        insertions += 2 * balance

        return insertions




