#First Problem 1466
class Solution(object):
    def minReorder(self, n, connections):
        graph = defaultdict(list)
        for a, b in connections:
            graph[a].append((b, 1))  
            graph[b].append((a, 0))  

        queue = deque([0])
        visited = set()
        visited.add(0)
        reorder_count = 0

        while queue:
            current = queue.popleft()
            for neighbor, direction in graph[current]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    reorder_count += direction  
                    queue.append(neighbor)

        return reorder_count



#Second Problem 1471
class Solution(object):
    def getStrongest(self, arr, k):
        arr.sort()
        n = len(arr)
        median = arr[(n - 1) // 2]
        arr.sort(key=lambda x: (abs(x - median), x), reverse=True)

        return arr[:k]



#Third Problem 1472
class BrowserHistory(object):

    def __init__(self, homepage):
        self.history = [homepage]
        self.current = 0
        

    def visit(self, url):
        self.history = self.history[:self.current + 1]
        self.history.append(url)
        self.current += 1

        

    def back(self, steps):
        self.current = max(0, self.current - steps)
        return self.history[self.current]
        

    def forward(self, steps):
        self.current = min(len(self.history) - 1, self.current + steps)
        return self.history[self.current]




